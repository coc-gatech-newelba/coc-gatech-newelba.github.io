<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2018-04-11 16:41"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Georgia Tech Elba</title>
	<link>https://gtelbatutorial.wordpress.com</link>
	<description></description>
	<pubDate>Wed, 11 Apr 2018 16:41:31 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://gtelbatutorial.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>135451490</wp:author_id><wp:author_login><![CDATA[gtelbaproject]]></wp:author_login><wp:author_email><![CDATA[gt.elba.project@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[GT Elba Project]]></wp:author_display_name><wp:author_first_name><![CDATA[GT Elba]]></wp:author_first_name><wp:author_last_name><![CDATA[Project]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
	<wp:term><wp:term_id>1357</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[primary]]></wp:term_slug><wp:term_name><![CDATA[Primary]]></wp:term_name>
</wp:term>

	<generator>http://wordpress.com/</generator>
<image>
		<url>http://s0.wp.com/i/buttonw-com.png</url>
		<title>Georgia Tech Elba</title>
		<link>https://gtelbatutorial.wordpress.com</link>
	</image>
		
	<item>
		<title>Contact</title>
		<link>https://gtelbatutorial.wordpress.com/contact__trashed/</link>
		<pubDate>Thu, 22 Feb 2018 16:34:55 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[[contact-form][contact-field label="Name" type="name" required="1"/][contact-field label="Email" type="email" required="1"/][contact-field label="Comment" type="textarea" required="1"/][/contact-form]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2018-02-22 16:34:55</wp:post_date>
		<wp:post_date_gmt>2018-02-22 16:34:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>contact__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>switch_like_status</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_g_feedback_shortcode</wp:meta_key>
			<wp:meta_value><![CDATA[[contact-field label="Name" type="name" required="1"/][contact-field label="Email" type="email" required="1"/][contact-field label="Comment" type="textarea" required="1"/]]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1521823669]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[contact]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to the Elba Project</title>
		<link>https://gtelbatutorial.wordpress.com/?p=3</link>
		<pubDate>Thu, 22 Feb 2018 16:34:54 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/linear-tutorial/">Tutorial</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Topology</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Parameters</a>&nbsp;<a class="button" href="https://gtelbatutorial.wordpress.com/nsfile/">NSFiles</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/resource-monitors/">Resource Monitors</a> <a class="button" href="https://gtelbatutorial.wordpress.com/cloud-deployment/">Cloud Deployment</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/faqs/">FAQs</a>&nbsp;<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-analysis/">Experiment Analysis</a>
<p style="text-align:left;"><b>Background.</b> One of the main research challenges in the Adaptive Enterprise vision is the automation of large application system management, encompassing design, deployment, to production use, and capturing application monitoring, evaluation, and evolution. Current approaches to enterprise system evaluation and tuning happen on production systems where the real workload to the deployed system is analyzed on-line and corresponding measurements are taken. In addition, many of these systems go through a detailed staging process that is mostly manual, complex and time-consuming. During the staging process the system to be produced is subjected to workloads to determine whether it will meet the production workloads. Finally, data gleaned from the staging process can be re-used to guide future designs and for management of system during operations.</p>
<b>Project Motivation.</b> We want to verify and test an application system deployment plan in a staging environment before committing it to a production environment. Manual verification of a deployment is cumbersome, time consuming, and error prone. This problem will grow in importance in the deployment of increasingly larger and more sophisticated applications. Therefore, it will be increasingly important to have an automatic method for executing a benchmark on the deployment plan to validate the deployment during staging, instead of debugging a deployment during production use.

<img class=" size-full wp-image-13 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg" alt="ELBA_ARCH" width="585" height="329" />
<h2>Contributions and Approaches</h2>
<h3>Automated Deployment and Staging Infrastructure</h3>
<b>Approach.</b> In our project we intend to automate the staging process thus reducing the time and manual labor involved in the process, increase confidence, and extract predictive performance data. Further, the automation will support a more thorough application test and validation in a larger state space, since we plan to automate the monitoring and analysis steps to speed up the refinement of application deployment. Our tools will translate a high-level specification of performance and availability (e.g., SLA requirements) into executable deployment, test, evaluation, and analysis code for the staging phase. This work builds on our experience and technology previously developed such as evaluation of SmartFrog and translation of Quartermaster design specifications into SmartFrog deployment programs.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure below, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.
<h3>Performance Cartography</h3>
<b>Approach.</b> In our evaluation, we have created a powerful infrastructure to generate the full set of experimental specifications to measure the performance of standard benchmarks over a wide range of hardware and software configurations. We have decided to use this infrastructure to study experimentally the performance variations of these benchmarks over a range of different configurations. Without our code generation infrastructure, past performance studies have been limited in scope due to practical problems of managing the number of experiments. We have used the Mulini code generator to create a large number of performance measurement experiments, run the experiments and collect/analyze data automatically, and used the analysis to generate Performance Maps.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure above, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.

<b>Research Contributions.</b> Currently, there is no reliable way to predict the performance of complex applications (e.g., N-Tier distributed application such as Rubis and TPC-App) in a complex environment(e.g., data centers). The limitations of analytical methods are due to the strong assumptions needed for solving the analytical models (e.g., based on queuing theory) that are valid only for relatively simple environments. The limitations of experimental measurements are due to the complexity of managing the many configuration combinations in practice. Our work leverages the Elba infrastructure (particularly, the Mulini generator) to generate and manage the experiments, and then use automated analysis techniques and tools to digest the information and create a Performance Map. The Performance Map is a reliable indicator of complex system performance, since it reflects actually measured experiments on the Performance Terrain (modulo tuning and other complications).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2018-02-22 16:34:54</wp:post_date>
		<wp:post_date_gmt>2018-02-22 16:34:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>introduction-to-elba__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[the-journey-begins]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>switch_like_status</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16034087262]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1522876123]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[introduction-to-elba]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Home</title>
		<link>https://gtelbatutorial.wordpress.com/2018/02/22/home/</link>
		<pubDate>Thu, 22 Feb 2018 16:39:55 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/02/22/home/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2018-02-22 16:39:55</wp:post_date>
		<wp:post_date_gmt>2018-02-22 16:39:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[/]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Placeholder Image</title>
		<link>https://gtelbatutorial.wordpress.com/contact__trashed/placeholder-image/</link>
		<pubDate>Thu, 22 Feb 2018 16:39:58 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/02/person-smartphone-office-table.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2018-02-22 16:39:58</wp:post_date>
		<wp:post_date_gmt>2018-02-22 16:39:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>placeholder-image</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/02/person-smartphone-office-table.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/person-smartphone-office-table.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1600;s:6:"height";i:1067;s:4:"file";s:108:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/person-smartphone-office-table.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:55817;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Placeholder Image</title>
		<link>https://gtelbatutorial.wordpress.com/?attachment_id=9</link>
		<pubDate>Thu, 22 Feb 2018 16:39:59 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/02/fly.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2018-02-22 16:39:59</wp:post_date>
		<wp:post_date_gmt>2018-02-22 16:39:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>placeholder-image-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/02/fly.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/fly.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1600;s:6:"height";i:1062;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/fly.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:113595;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ELBA_ARCH</title>
		<link>https://gtelbatutorial.wordpress.com/?attachment_id=13</link>
		<pubDate>Fri, 23 Mar 2018 16:25:56 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2018-03-23 16:25:56</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:25:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>elba_arch</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/elba_arch.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:585;s:6:"height";i:329;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/elba_arch.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:117820;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Elba Main</title>
		<link>https://gtelbatutorial.wordpress.com/?attachment_id=14</link>
		<pubDate>Fri, 23 Mar 2018 16:27:42 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/02/elba-main.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2018-03-23 16:27:42</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:27:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>elba-main</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/02/elba-main.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/elba-main.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:559;s:6:"height";i:345;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/elba-main.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:70459;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>visit-tech</title>
		<link>https://gtelbatutorial.wordpress.com/?attachment_id=16</link>
		<pubDate>Fri, 23 Mar 2018 16:31:09 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/02/visit-tech.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2018-03-23 16:31:09</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:31:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>visit-tech</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/02/visit-tech.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/visit-tech.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1500;s:6:"height";i:650;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/visit-tech.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1542362;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Georgia Tech Elba Project</title>
		<link>https://gtelbatutorial.wordpress.com/georgia-tech-elba-project__trashed/</link>
		<pubDate>Fri, 23 Mar 2018 16:34:13 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=17</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2018-03-23 16:34:13</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:34:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>georgia-tech-elba-project__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1521822870]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[georgia-tech-elba-project]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linear Tutorial</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/</link>
		<pubDate>Fri, 23 Mar 2018 16:35:23 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=19</guid>
		<description></description>
		<content:encoded><![CDATA[<b>Experiment Step-by-Step Set-up</b>

<a class="button" href="https://gtelbatutorial.wordpress.com/2018/02/22/introduction-to-elba">Home</a>
<ol>
	<li><span style="font-weight:400;"> Create account on the Emulab cloud infrastructure at </span><a href="http://www.emulab.net/index.php3"><i><span style="font-weight:400;">emulab.net</span></i></a><span style="font-weight:400;"> and wait for approval<img class="alignnone size-full wp-image-43" src="https://gtelbatutorial.files.wordpress.com/2018/03/emulabelba.png" alt="EmulabElba" width="1776" height="1125" /></span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">Once approved for an account fill out your information- make note of the following two points:</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">When filling out information for your account ensure that you put “Infosphere” for both the group AND the project</span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">Select </span><b>bash </b><span style="font-weight:400;">under the shell portion</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">Please note: if you forget, this can be set after logging into Emulab and clicking the “Edit Profile” link</span></li>
</ol>
</li>
</ol>
</li>
	<li style="font-weight:400;"><span style="font-weight:400;">Create a public RSA (SSH) key on your local ‘nix machine under a </span><b>bash</b><span style="font-weight:400;"> shell. </span></li>
</ol>
<a class="button" href="https://gtelbatutorial.wordpress.com/2018/02/22/ssh">SSH Generation</a>

<span style="font-weight:400;">4. Add the SSH key to your account by selecting “My Account” and then “Edit SSH keys” on the left hand side of the page.  This is where you would paste your SSH key from the prior step.</span>

<span style="font-weight:400;">5. Email Josh Kimball with your GitHub username to gain access into the GitHub repository</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">Josh Kimball email address: <a href="mailto:Elba@cc.gatech.edu">Elba@cc.gatech.edu</a>
</span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">If you are unfamiliar with GitHub, please create an account at GitHub.com</span></li>
</ol>
<span style="font-weight:400;">6. Using your computer terminal, create a directory on Emulab’s file share, users.emulab.net, by executing the following commands:</span>
<ol>
	<li style="list-style-type:none;">
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">Please note: substitute for your Emulab account username</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">Example: </span><a href="mailto:JaneDoe@users.emulab.net"><span style="font-weight:400;">JaneDoe@users.emulab.net</span></a></li>
</ol>
</li>
	<li style="font-weight:400;"><span style="font-weight:400;">ssh JaneDoe@users.emulab.net  </span><span style="font-weight:400;">
</span><span style="font-weight:400;">  cd /proj/Infosphere  </span><span style="font-weight:400;">
</span><span style="font-weight:400;">  mkdir JaneDoe<img class="alignnone size-full wp-image-45" src="https://gtelbatutorial.files.wordpress.com/2018/03/screenshot2lineartutorial.png" alt="Screenshot2LinearTutorial" width="1038" height="736" /></span></li>
</ol>
</li>
</ol>
<span style="font-weight:400;">7. Use the following webpage to clone the ‘Alpha release of Project NewElba’ into your directory: </span><a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git"><span style="font-weight:400;">https://github.com/coc-gatech-newelba/NewElbaAlpha.git</span></a>

<i><span style="font-weight:400;">NOTE: if you do not gain permission from Josh Kimball, you will not be able to access this page.</span></i>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">In your terminal, enter the directory where you would like to copy the repository</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">cd ~/</span></li>
</ol>
</li>
	<li style="font-weight:400;"><span style="font-weight:400;">Clone the repository by executing the following code</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">git clone </span><a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git"><span style="font-weight:400;">https://github.com/coc-gatech-newelba/NewElbaAlpha.git</span></a>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">After executing this command, you will be asked to provide your GitHub username and password, so please have this information on hand when going through this step</span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">(insert March 1.1 screenshot)</span></li>
</ol>
</li>
</ol>
</li>
	<li style="font-weight:400;"><span style="font-weight:400;">Navigate into the directory of the repository you just created and replace with the repository’s name (NewElbaAlpha)</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">cd NewElbaAlpha</span></li>
</ol>
</li>
	<li style="font-weight:400;"><span style="font-weight:400;">Type:</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">git status</span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">You should see this:<img class="alignnone size-full wp-image-47" src="https://gtelbatutorial.files.wordpress.com/2018/03/screenshot3lineartutorial.png" alt="Screenshot3LinearTutorial" width="1033" height="226" /></span></li>
</ol>
</li>
</ol>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">Next, execute the following commands:</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">cd /proj/Infosphere/  </span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">cp -r ./NewElbaAlpha/generator/common /proj/Infosphere/  </span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">mkdir -p /proj/Infosphere//rubbos/rubbos_yasu  </span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">tar -zxvf ./NewElbaAlpha/generator/shared_files.tar.gz --directory=/proj/Infosphere//rubbos/rubbos_yasu  </span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">mkdir -p /proj/Infosphere//softwares/data  </span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">cp -r ./NewElbaAlpha/mScopeEventMonitors /proj/Infosphere//softwares  </span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">cp -r ./NewElbaAlpha/mScopeResourceMonitors /proj/Infosphere//softwares   </span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">cp /proj/Infosphere/shared_software/rubbos_orig_data.tar.gz /proj/Infosphere//softwares/data  </span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">Your terminal should look like the following:</span></li>
</ol>
</li>
</ol>
<img class="alignnone size-full wp-image-50" src="https://gtelbatutorial.files.wordpress.com/2018/03/screenshot4tutorial.png" alt="Screenshot4Tutorial" width="1798" height="851" />
<h4><img class="alignnone size-full wp-image-49" src="https://gtelbatutorial.files.wordpress.com/2018/03/screenshot5tutorial.png" alt="Screenshot5Tutorial" width="1892" height="826" /></h4>
<h4><a href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Description</a></h4>
Follow this <a href="https://gtelbatutorial.wordpress.com/experiment-customization/">link</a> if you want to execute an experiment other than the topology 1-1-1-1.

The example experiment uses an n-tier application benchmark, RUBBoS. RUBBoS is modeled after a commercial web-based bulletin board system, SlashDot. The benchmark natively supports Read-only and Read-Write workloads, and it enables users to specify the workload in terms of the number of concurrent client requests. For this tutorial, we will use workloads ranging from 1000 to 7000. This example experiment features a system topology composed of:
<ul>
	<li>1 Apache HTTP server</li>
	<li>1 Tomcat Application server</li>
	<li>1 CJDBC Middleware server</li>
	<li>1 MySQL DB server</li>
</ul>
Note: we generally refer to this as a <a href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-1 topology</a> where each number corresponds to the number of deployed Web, Application, Middleware and Database servers in that order.

[googleapps domain="drive" dir="file/d/0ByvytIe8I-qpbDhDV1ZPU0RjcVU/preview" query="" width="640" height="480" /]

<em>Note: The video above takes you through executing an experiment. However, the most up to date information is listed below so put precedence on the below instructions and use the video as support.</em>
<h4><a id="user-content-experiment-creation" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#experiment-creation"></a>Experiment Creation</h4>
To increase the efficiency and speed of cloud-based systems research, we rely on code generation techniques to create experiments. Before generating artifacts such as installation scripts and configuration, a "reservation" needs to be created on one of the supported public clouds. In addition, the experiment configuration needs to be supplied to the generator. The following two steps accomplish these tasks while the final step outputs the necessary experimental artifacts for running the desired experiment on the public cloud.
<h4><a id="user-content-step-1-create-experiment-on-emulab-cluster" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-1-create-experiment-on-emulab-cluster"></a>Step 1: Create experiment on Emulab cluster</h4>
<ol>
	<li><span style="font-weight:400;">Create a new experiment on Emulab by selecting the </span><i><span style="font-weight:400;">Experimentation</span></i><span style="font-weight:400;"> drop down at the top of the website and select </span><i><span style="font-weight:400;">Begin an Experiment</span></i></li>
	<li>Fill out the the form accordingly.
<ul>
	<li>Make note of the <em><strong>Experiment Name</strong></em> you provide; this value will be needed later to generate the experiment's artifacts</li>
	<li><em>Naming Convention</em> for <em><strong>Experiment Name</strong></em> : use lowercase letters and/or numbers in the name, no spaces or special characters, including underscore ("_")</li>
</ul>
</li>
	<li>This form also asks you to provide an <em>.NSFile</em><a class="button" href="https://gtelbatutorial.wordpress.com/nsfile">.NSFile Generation</a>
<ul>
	<li>This input file specifies the network topology, machine types and OS images for the experiment</li>
	<li>Note: a sample .NSfile can be found <a href="https://gtelbatutorial.wordpress.com/nsfile/">here</a>.
<ul>
	<li>To execute the 1-1-1-1 topology you can copy and paste the code given <a href="https://gtelbatutorial.wordpress.com/nsfile/">here</a> into a text editor. <em>Note: if you are using a Mac then use Sublime, Vim, or TextWrangler- do NOT use TextEditor. </em></li>
</ul>
</li>
</ul>
</li>
	<li>For this example, the <em>.NSFile</em> needs to include 10 nodes, corresponding to: 1 Control node, 1 Benchmark node, 4 Client node, 1 HTTPD node, 1 Tomcat node, 1 C-JDBC node, and 1 MySQL node.</li>
</ol>
Comment: In this example, all of the nodes are on one local area network (LAN). This can be changed by including more LAN's in the specification and connecting the desired nodes to a particular LAN.
<h4><a id="user-content-step-2-describing-the-experiment-by-editingcompleting-experiment-xml" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-2-describing-the-experiment-by-editingcompleting-experiment-xml"></a>Step 2: Describing the Experiment by editing/completing Experiment XML</h4>
<span style="font-weight:400;">We use an XML file as a basis for generating all experiment artifacts. This XML file contains various environmental and experimental parameters, for example:</span>
<ol>
	<li>username and groupname for executing the experiment</li>
	<li>workload, i.e. number of concurrent user requests</li>
	<li>number of nodes (servers) and the component software (application software) to install on each</li>
	<li>monitoring to activate</li>
</ol>
In short, these parameters control the software, topology, workload and monitors used during the execution of a system experiment. As such, it functions as a de facto experiment specification.

To begin, perform the following commands:
<pre><code>cd /proj/Infosphere//common/experiment_xml  
cp RUBBOS-1111-EMULAB-DEFAULT.xml RUBBOS-1111-EMULAB-.xml  
</code></pre>
Several default parameters need to be changed to execute our example:
<ul>
	<li><em>EMULAB_EXPERIMENT_NAME</em>
Complete this value using the <strong><em>Experiment Name</em></strong> value from above (step 1) using the following format: <em>Experiment Name.infosphere.emulab.net</em>
<ul>
	<li>For example, if the supplied value for Experiment Name during Step 1 was jkimball1112, then the value for this parameter would be: jkimball1112.infosphere.emulab.net</li>
</ul>
</li>
	<li>Output Directories
<ul>
	<li>The following group of parameters direct where the experiment's scripts and output are copied.</li>
	<li>Complete these by providing the <em>Experiment Name</em> value from Step 1 and your Emulab account <em>username</em></li>
</ul>
</li>
</ul>
<pre><code> /rubbos/rubbos_yasu"/&gt;/rubbos/ rubbos_yasu/"/&gt;@users.emulab.net"/&gt;/results"/&gt;  </code></pre>
<ul>
	<li><em>Username: </em>Complete using your Emulab account username</li>
</ul>
<code>  "/&gt;  </code>
<ul>
	<li>Monitors: Set the following monitor parameters to <em>false</em></li>
</ul>
<ul>
	<li>Workloads
<ul>
	<li>This example experiment uses workloads ranging from 1000 to 7000 concurrent requests.</li>
</ul>
<ul>
	<li>Lines like the one below can be modified by either changing the corresponding value or commenting out the line entirely</li>
</ul>
</li>
</ul>
<em>Important Notes</em>
<ul>
	<li>mysqlReponseTime parameter should remain "false." The screencast accompanying these instructions sets this parameter incorrectly.</li>
	<li>This file contains many additional parameters. A more complete description for most of them can be found at the end of the tutorial in the <a href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Configuration Parameters</a>.</li>
</ul>
<h4><a id="user-content-step-3-generate-experiment-scripts-and-configuration-using-experiment-xml" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-3-generate-experiment-scripts-and-configuration-using-experiment-xml"></a>Step 3: Generate Experiment Scripts and Configuration using Experiment XML</h4>
<span style="font-weight:400;">
Experimental artifacts like the scripts and software configuration are created dynamically by the code generation pipeline. This pipeline can be executed using the following commands, substituting the values for and as provided in Step 2:</span>
<ul>
	<li><code>ssh node1.</code></li>
	<li><code>cd /proj/Infosphere//common/rubbosMulini6
</code></li>
</ul>
Finally, open <em>runRubbosExperiment.sh</em> and substituting with the specified values
<ul>
	<li><code>BUILD_DIR = /proj/Infosphere/</code></li>
	<li><code> OUTPUT_HOME =  from Step2
</code></li>
</ul>
The script can now be run with the following command where corresponds to the name of the Experiment XML file from Step 2:
<ul>
	<li><code>./runRubbosExperiment.sh </code></li>
</ul>
In the case of our running example, this should be:
<ul>
	<li><code>./runRubbosExperiment.sh RUBBOS-1111-EMULAB-.xml
</code></li>
</ul>
<em>Important Notes</em>:
<ul>
	<li>Activating the experiment on <em>emulab</em>, ("swapping it in") and logging into node1 is not a <em>strict</em> dependency. Since the image and <em>emulab</em> environment already have the proper environment variables set, this step ensures consistency during experiment generation.</li>
	<li>The script should be run from a location that has the environment variable, JAVA_HOME, set. Nodes using the FC15RubOral image already have JAVA_HOME set. So, we recommend connecting to the Control node with <strong>ssh</strong> to execute this step.</li>
	<li>[jk] Double check whether this can run with a different JAVA version or if it needs to be Java 1.4</li>
	<li>Sample Experiment XML files are available in the <code>/examples</code> directory in our <a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git">Github repository.</a></li>
</ul>
<h4>Code Generator Description</h4>
In general, our code generator is orchestrated by way of the <code>runRubbosExperiment.sh</code> script. This script calls a Java program, DeployScriptGenerator, which generates all of the necessary scripts and artifacts for executing an experiment in one of the supported infrastructures. The following describes the script more generally and the organization of the code generator source code:
<ol>
	<li>Code Generator Organization:
<ul>
	<li>Base directory, <code>../common/rubbosMulini6</code>, contains the aforementioned script. It also acts as a reference point for executing the code generator and pipeline.</li>
	<li>Two sub-directories house the code generator source and base artifacts:
<ul>
	<li><code>../rubbosMulini6/templates</code> - contains the XSL-based code templates that serve as a basis for the experiment scripts</li>
	<li><code>../rubbosMulini6/source</code> - contains the Java source code for the code generator</li>
</ul>
</li>
</ul>
</li>
	<li>Parameter Descriptions. The <code>runRubbosExperiment.sh</code> script uses the following parameters in addition to those mentioned at the beginning of this Step. These might need to be altered depending on the environment used for generating experiments:
<ul>
	<li>MULINI_DIR: specifies the base directory of the code generator, i.e. <code>../rubbosMulini6</code>from above</li>
	<li>EXP_DIR: specifies the path to Experiment XML files, i.e. the location for the filename specified as a command line parameter</li>
</ul>
</li>
	<li><em>Dependencies</em>:
<ul>
	<li>Directories, <code>/templates</code> and <code>/source</code> need to be located in the same directory as the aforementioned script. Currently, all of these appear under <code>/common</code> in the source code repository under <code>/code_generator/</code></li>
	<li>Value of <code>OUTPUT_HOME</code> parameter used in this script needs to be the same as the value of the <code>OUTPUT_HOME</code> parameter specified in the referenced Experiment XML file</li>
</ul>
</li>
</ol>
<h4><a id="user-content-step-4-executing-the-experiment-on-emulab-cluster" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-4-executing-the-experiment-on-emulab-cluster"></a>Step 4: Executing the Experiment on Emulab cluster</h4>
Continuing with our example, perform the following preliminaries by substituting the values for parameters, and , as provided in Step 2:
<ul>
	<li><code>ssh node1. </code></li>
	<li><code>
cd /scripts
</code></li>
</ul>
Finally, the experiment can be run by executing the ‘run.sh’ script with the following command:
<ul>
	<li><code>./run.sh
</code></li>
</ul>
While executing an experiment in this manner works, there a few downsides to executing an experiment this way. These limitations are:
<ul>
	<li>Error messages or standard output will not be captured for future analysis. This makes the verification that the experiment ran "correctly" rather difficult as debugging would require examining terminal-based output.</li>
	<li>Secondly, since this command is executed over an SSH session, it could timeout if the experiment execution time exceeds the default session timeout, causing an abrupt termination of the experiment prior to its natural completion. These problems are resolved by using the following, alternative method.</li>
</ul>
Running experiments under a <code>screen</code> session mitigates these problems. [Ensure the Linux program <em>screen</em> is installed prior to executing an experiment with this method.] The Linux program, <em>screen</em>, enables scripts to be executed independent of an active <strong>ssh</strong> session. To run an experiment under <em>screen</em>, use the following:
<ul>
	<li><code>./run_screen.sh
</code></li>
</ul>
This script creates a new session, navigates to the experiment at the provided path, runs the experiment while storing the output, and detaches the screen from your current shell. The script also saves all output to a log file in the specified directory.

To re-attach to the screen session, a user can run the following command and replacing with the <em>Experiment Name</em> value from Step 1:
<ul>
	<li><code>screen –r
</code></li>
</ul>
<h4><a id="user-content-experiment-organization" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#experiment-organization"></a>Experiment Organization</h4>
In general, every generated experiment adheres to a canonical structure.
<pre><code>/proj/infosphere//rubbos/rubbos_yasu/  
</code></pre>
<ul>
	<li>is the top-level directory that holds all of the generated experiment artifacts. In fact, this line corresponds to the value supplied for the <em>OUTPUT_HOME</em> parameter in the Experiment XML</li>
	<li>This acts as a de facto reference point for many other scripts during the installation and configuration of the environment's nodes and benchmark</li>
	<li>It must be accessible to the environment where the experiment will be run, so the associated scripts and configuration can be executed</li>
	<li><em>Shared Structures.</em> There are several <em>shared directories</em>, i.e. all experiments reference these directories and must exist under <code>../rubbos_yasu</code>, i.e. in the context of OUTPUT_HOME, these structures must be at the same level in the path as the . These directories are:
<ul>
	<li>emulab_files: file system configuration for <code>fdisk</code></li>
	<li>tomcat_files: standard startup and shutdown scripts</li>
	<li>apache_files: static html files for the benchmark</li>
	<li>rubbos_files: benchmark source code for the Client generator and Application logic (Servlets)</li>
	<li><em>Note: There can be others such as postgres_files and a directory for marmot; however, these are only necessary for running experiments with postgres DBMS and the PRObE cloud respectively.</em></li>
</ul>
</li>
</ul>
<h4><a href="https://gtelbatutorial.wordpress.com/faqs/">FAQ and Best Practices</a></h4>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2018-03-23 16:35:23</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:35:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>linear-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Topologies</title>
		<link>https://gtelbatutorial.wordpress.com/experiment-customization/</link>
		<pubDate>Fri, 23 Mar 2018 16:35:58 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=21</guid>
		<description></description>
		<content:encoded><![CDATA[One way to customize the execution of an experiment is to run a different topology. Below are several different topologies one can select to execute.

<img class="alignnone size-full wp-image-100" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-6-53-26-pm.png" alt="Screen Shot 2018-03-28 at 6.53.26 PM" width="1200" height="328" />

The above image details the experiment set up on the Emulab Cluster.

<a class="button" href="https://gtelbatutorial.wordpress.com/2018/02/22/introduction-to-elba">Home</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-1</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-2</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-3</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-4</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-5</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-6</a>
<h4>Creating New Topologies</h4>
These instructions cover the basic task of modifying the experimental artifacts to generate different system topologies.

NSFile
<ul>
	<li>The node list and the list assigning nodes to LANs need to be modified to reflect the desired experimental topology, i.e. nodes from each of these lists need added or removed accordingly.</li>
</ul>
Experiment XML
<ul>
	<li>After the &lt;env&gt; tag, &lt;instance&gt; tags describe each of the servers for an experimental topology. As such, either more of these these &lt;instance&gt; XML blocks need to added or removed to align the desired topology.</li>
	<li>For example, if the desired topology has 4 Apache servers, then the 3 additional XML blocks with following signature - &lt;instance name="HTTPD1" type="web_server"&gt; - need to be created. It's probably easiest to just copy and paste the original block, 3 times.</li>
	<li>Now, each replicated block needs to have their "name" attribute and their &lt;target&gt; tag adjusted. To create a unique name, we suggest incrementing a counter for each block replicated. So, in this case, the names for each of the replicated blocks should be "HTTPD2", "HTTPD3", "HTTPD4".</li>
	<li>As mentioned, the &lt;target&gt; tags also need to be adjusted. Once again, we recommend simply incrementing the counter "suffix" for each replicated block. In this case, the &lt;target&gt; for HTTPD1 has "node7" as its value. So, the three replicas should have "node8", "node9", "node10".</li>
	<li>Finally, the "downstream" &lt;target&gt; values need to be adjusted. Notice that "node10" used to be assigned to MYSQL1 but now HTTPD4 has assumed that value. As such, the &lt;target&gt; tags in the TOMCAT, CJDBC and MYSQL blocks need to be adjusted. We recommend incrementing the counter suffix for each downstream node sequentially. In our example, this means the &lt;target&gt; tag value for TOMCAT1 would be "node11" since HTTPD4 was "node10".</li>
</ul>
<strong><em>Note</em></strong>: OUTPUT_HOME should be changed to account for this new topology; however, the same convention should still be used. This will ensure an entirely new directory for this new topology will be created. Once you've made this change, immediately apply this <em>new</em> value to the <em>runRubbosExperiment.sh</em> script! Finally, re-run the generator by executing the <em>runRubbosExperiment.sh</em> with the modified Experiment XML as the input parameter.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2018-03-23 16:35:58</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:35:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>experiment-customization</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Topology 1-1-1-1</title>
		<link>https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/</link>
		<pubDate>Fri, 23 Mar 2018 16:36:13 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=23</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2018-03-23 16:36:13</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:36:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>experiment-topology-1-1-1-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NSFile</title>
		<link>https://gtelbatutorial.wordpress.com/nsfile/</link>
		<pubDate>Fri, 23 Mar 2018 16:44:11 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=27</guid>
		<description></description>
		<content:encoded><![CDATA[<h3 id="DesigningaNetworkTopology">Designing a Network Topology</h3>
<a class="button" href="https://gtelbatutorial.wordpress.com/nsfile-example/">.NSFile Example</a> <a class="button" href="https://gtelbatutorial.wordpress.com/ns-commands/">NS Commands</a>&nbsp;<a class="button" href="https://gtelbatutorial.wordpress.com/2018/02/22/introduction-to-elba">Home</a>

Part of Emulab's power lies in its ability to assume many different topologies; the description of a such a topology is a necessary part of an experiment. (Note: You may want to take a look at our <a class="ext-link" href="https://www.emulab.net/clientui.php3"><span class="icon">Java GUI</span></a> to build experiments without directly editing NS files.) Emulab uses the "NS" ("Network Simulator") format to describe network topologies. This is substantially the same <a class="ext-link" href="http://www.scriptics.com/software/tcltk/"><span class="icon">Tcl</span></a>-based format used by <a class="ext-link" href="http://www.isi.edu/nsnam/ns/"><span class="icon">ns-2</span></a>. Since Emulab offers emulation, rather than simulation, these files are interpreted in a somewhat different manner than ns-2. Therefore, some ns-2 functionality may work differently than you expect, or may not be implemented at all. Please look for warnings of the form:

If you feel there is useful functionality missing, please let us know. Also, some <a class="wiki" href="https://wiki.emulab.net/wiki/Emulab/wiki/nscommands">testbed-specific syntax</a> has been added, which with the inclusion of compatibility module (tb_compat.tcl), will be ignored by the NS simulator. This allows the same NS file to work on both Emulab and ns-2, most of the time.

For those unfamiliar with the NS format, here is a small example (<i>We urge all new Emulab users to begin with a small 3-5 node experiment such as this, so that you will become familiar with NS syntax and the practical aspects of Emulab operation</i>). Let's say we are trying to create a test network which looks like the following:

<img title="Abcd.Png" src="https://wiki.emulab.net/wiki/attachment/Tutorial/abcd.png?format=raw" alt="Abcd.Png" />

(A is connected to B, and B to C and D with a LAN.)
An NS file which would describe such a topology is as follows. First off, all NS files start with a simple prologue, declaring a simulator and including a file that allow you to use the special <tt>tb-</tt>commands:
<pre class="wiki">  	# This is a simple ns script. Comments start with #.
  	set ns [new Simulator]
        source tb_compat.tcl
</pre>
Then define the 4 nodes in the topology.
<pre class="wiki">  	set nodeA [$ns node]
  	set nodeB [$ns node]
  	set nodeC [$ns node]
  	set nodeD [$ns node]
</pre>
<tt>nodeA</tt> and so on are the virtual names (vnames) of the nodes in your topology. When your experiment is swapped in, they will be assigned to physical node names like "pc45", probably different ones each time. (<strong>NOTE:</strong> It's a bad idea to pick vnames that clash with the physical node names in the testbed.)

Next define the link and the LAN that connect the nodes. NS syntax permits you to specify the bandwidth, latency, and queue type. Note that since NS can't impose artificial losses like Emulab can, there is a separate command to add loss on a link. For our example, we will define a full speed LAN between B, C, and D, and a shaped link from node A to B.
<pre class="wiki">  	set link0 [$ns duplex-link $nodeB $nodeA 30Mb 50ms DropTail]
  	tb-set-link-loss $link0 0.01
  	set lan0 [$ns make-lan "$nodeD $nodeC $nodeB " 100Mb 0ms]
</pre>
In addition to the standard NS syntax above, a number of <a class="wiki" href="https://wiki.emulab.net/wiki/Emulab/wiki/nscommands">extensions</a> have been added that allow you to better control your experiment.

For example, you may specify what Operating System is booted on your nodes. We currently support FreeBSD 4.10, FreeBSD 6.2, <a class="wiki" href="https://wiki.emulab.net/wiki/Emulab/wiki/RedHat">RedHat</a> Linux 9.0, Fedora Core 4, Fedora Core 6, and <a class="wiki" href="https://wiki.emulab.net/wiki/Emulab/wiki/Windows">Windows XP</a>. <a class="ext-link" href="http://www.emulab.net/kb-show.php3?xref_tag=SWS-WIN2K"><span class="icon">Windows 2000</span></a> is not supported. Fedora Core 2 (Linux 2.6) is available but unsupported. We also support <a class="ext-link" href="http://www.cs.utah.edu/flux/oskit/"><span class="icon">OSKit</span></a> kernels on the Emulab PCs.

Click <a class="ext-link" href="https://www.emulab.net/showosid_list.php3"><span class="icon">List ImageIDs and OSIDs</span></a> in the Emulab web interface "Interaction" pane to see the current list of Emulab-supplied OS. By default, our most recent Linux image is selected.
<pre class="wiki">  	tb-set-node-os $nodeA FBSD-STD
  	tb-set-node-os $nodeC RHL-STD
  	tb-set-node-os $nodeC WINXP-UPDATE
</pre>
In a topology like this, you will likely want to communicate between all the nodes, including nodes that aren't directly connected, like A and C. In order for that to happen, we must enable routing in our experiment, so B can route packets for the other nodes. The typical way to do this is with Static routing. (Other options are detailed below, in the Routing section below.
<pre class="wiki">  	$ns rtproto Static
</pre>
Lastly, all NS files end with an epilogue that instructs the simulator to start.
<pre class="wiki"> 	# Go!
  	$ns run
</pre>
If you would like to try the above example, the completed <a class="attachment" href="https://wiki.emulab.net/wiki/Emulab/wiki/attachment/Tutorial/basic.ns">NS file</a> can be run as an experiment in your project. Because NS is based on TCL, the full power of the TCL language is available for you to use in your NS files, including loops, control structures, and even procedures/functions. Here's an example of a simple loop: (Download this example: <a class="attachment" href="https://wiki.emulab.net/wiki/Emulab/wiki/attachment/Tutorial/loop.ns">loop.ns</a>)
<pre class="wiki">  	# This is a simple ns script that demonstrates loops.
  	set ns [new Simulator]
  	source tb_compat.tcl
  	set maxnodes 3
  	set lanstr ""
  	for {set i 1} {$i &lt;= $maxnodes} {incr i} {
  	    set node($i) [$ns node]
  	    append lanstr &quot;$node($i) &quot;
  	    tb-set-node-os $node($i) FBSD-STD
  	}
  	# Put all the nodes in a lan
  	set big-lan [$ns make-lan &quot;$lanstr&quot; 100Mb 0ms]
  	# Go!
  	$ns run
</pre>
<a name="section-5"></a>
<h3 id="BeginningtheExperiment">Beginning the Experiment</h3>
After logging on to the Emulab Web Interface, choose the "Begin Experiment" option from the menu. First select which project you want the experiment to be configured in. Most people will be a member of just one project, and will not have a choice. If you are a member of multiple projects, be sure to select the correct project from the menu. Next fill in the <tt>Name' and </tt>Description' fields. The Name should be a single word (no spaces) identifier, while the Description is a multi word description of your experiment. In the "Your NS file" field, place the <i>local path</i> of an NS file which you have created to describe your network topology. This file will be uploaded through your browser when you choose "Submit." After submission, Emulab will begin processing your request. This will likely take several minutes, depending on how large your topology is, and what other features (such as delay nodes and bandwidth limits) you are using. Assuming all goes well, you will receive an email message indicating success or failure, and if successful, a listing of the nodes and IP address that were allocated to your experiment. For the NS file described above, you would receive a listing that looks similar to this:
<pre class="wiki">  	Virtual Node Info:
  	ID              Type         OS              Qualified Name
  	--------------- ------------ --------------- --------------------
  	nodeA           pc			     nodeA.myexp.myproj.emulab.net
  	nodeB           pc                           nodeB.myexp.myproj.emulab.net
  	nodeC           pc                           nodeC.myexp.myproj.emulab.net
  	nodeD           pc                           nodeD.myexp.myproj.emulab.net
  	Physical Node Mapping:
  	ID              Type         OS              Physical
  	--------------- ------------ --------------- ------------
  	tbsdelay0       pc850        FBSD47-STD      pc61
  	nodeB           pc850        RHL73-STD       pc63
  	nodeC           pc600        RHL73-STD       pc31
  	nodeD           pc600        RHL73-STD       pc34
  	nodeA           pc600        RHL73-STD       pc13
  	Virtual Lan/Link Info:
  	ID              Member          IP/Mask         Delay     BW (Kbs)  Loss Rate
  	--------------- --------------- --------------- --------- --------- ---------
  	lan0            nodeC:0         10.1.2.3        0.00      100000    0.000
  	                                255.255.255.0   0.00      100000    0.000
  	lan0            nodeB:1         10.1.2.4        0.00      100000    0.000
  	                                255.255.255.0   0.00      100000    0.000
  	lan0            nodeD:0         10.1.2.2        0.00      100000    0.000
  	                                255.255.255.0   0.00      100000    0.000
  	link0           nodeB:0         10.1.1.2        25.00     30000     0.005
  	                                255.255.255.0   25.00     30000     0.005
  	link0           nodeA:0         10.1.1.3        25.00     30000     0.005
  	                                255.255.255.0   25.00     30000     0.005
  	Physical Lan/Link Info:
  	ID              Member          Delay Node   Delay    BW (Kbs) PLR    Pipe
  	--------------- --------------- ------------ -------- -------- ------ ---------
  	link0           nodeA           tbsdelay0    50.00    30000    0.010  100
  	link0           nodeB           tbsdelay0    50.00    30000    0.010  110
  	Route List:
  	Node            Interface       Dest            Nexthop         Type  Cost
  	--------------- --------------- --------------- --------------- ----- ----
  	nodeA           10.1.1.3     10.1.2.4     10.1.1.2     host  0
  	nodeA           10.1.1.3     10.1.2.0     10.1.1.2     net   0
  	nodeC           10.1.2.3     10.1.1.0     10.1.2.4     net   0
  	nodeD           10.1.2.2     10.1.1.0     10.1.2.4     net   0
</pre>
A few points should be noted:
<ul>
	<li>A single delay node was allocated and inserted into the link between nodeA and nodeB. This link is invisible from your perspective, except for the fact that it adds latency, error, or reduced bandwidth. However, the information for the delay links are included so that you can <a class="ext-link" href="http://www.emulab.net/kb-show.php3?xref_tag=modify-traffic-shaping"><span class="icon">modify the delay parameters</span></a> after the experiment has been created.</li>
	<li>Delays of less than 2ms (per trip) are too small to be accurately modeled at this time, and will be silently ignored. A delay of 0ms can be used to indicate that you do not want added delay; the two interfaces will be "directly" connected to each other.</li>
	<li>Each link in the "Virtual Lan/Link" section has its delay, etc., split between two entries. One is for traffic coming into the link from the node, and the other is for traffic leaving the link to the node. In the case of links, the four entries often get optimized to two entries in the "Physical Lan/Link" section.</li>
	<li>The names in the "Qualified Name" column refer to the control network interfaces for each of your allocated nodes. These names are added to the Emulab nameserver map on the fly, and are immediately available for you to use so that you do not have to worry about the actual physical node names that were chosen. In the names listed above, <tt>myproj' is the name of the project that you chose to work in, and </tt>myexp' is the name of the experiment that you provided in the "Begin an Experiment" page.</li>
	<li>Please don't use the "Qualified Name" from within nodes in your experiment, since it will contact them over the control network, bypassing the link shaping we configured. (See also these two FAQ entries: <a class="ext-link" href="http://www.emulab.net/kb-show.php3?xref_tag=no-traffic-shaping"><span class="icon">here</span></a> and <a class="ext-link" href="http://www.emulab.net/kb-show.php3?xref_tag=node-naming"><span class="icon">here</span></a>.)</li>
</ul>
<a name="section-6"></a>
<h3 id="UsingyourNodes">Using your Nodes</h3>
<blockquote>By the time you receive the email message listing your nodes, the Emulab configuration system will have ensured that your nodes are fully configured and ready to use. If you have selected one of the Emulab-supported operating system images (FreeBSD, Linux, or <a class="wiki" href="https://wiki.emulab.net/wiki/Emulab/wiki/Windows">Windows XP</a>), this configuration process includes:</blockquote>
<ul>
	<li>loading fresh disk images so that each node is in a known clean state;</li>
	<li>rebooting each node so that it is running the OS specified in the NS script;</li>
	<li>configuring each of the network interfaces so that each one is "up" and talking to its virtual LAN (VLAN);</li>
	<li>creating user accounts for each of the project members;</li>
	<li>mounting the projects NFS directory in /proj so that project files are easily shared amongst all the nodes in the experiment;</li>
	<li>creating a /etc/hosts file on each node so that you may refer to the experimental interfaces of other nodes by name instead of IP number;</li>
	<li>configuring all of the delay parameters;</li>
	<li>configuring the serial console lines so that project members may access the console ports from users.emulab.net or directly from their desktop.</li>
</ul>
As this point you may log into any of the nodes in your experiment. You will need to use Secure Shell (ssh), and you should use the `qualified name' from the nodes mapping table so that you do not form dependencies on any particular physical node. Your login name and password will be the same as your Web Interface login and password. The /etc/hosts file on each node will provide a local name mapping for the other nodes in your experiments. You should take care to use these names (or IP numbers) and <strong>not</strong> the .emulab.net names listed in the node mapping, since the Emulab names refer to the control network LAN that is shared amongst all nodes in all experiments. It is only the experimental interfaces that are entirely private to your experiment. (See also these two FAQ entries: <a class="ext-link" href="http://www.emulab.net/kb-show.php3?xref_tag=no-traffic-shaping"><span class="icon">here</span></a> and <a class="ext-link" href="http://www.emulab.net/kb-show.php3?xref_tag=node-naming"><span class="icon">here</span></a>.) <strong>NOTE:</strong> The configuration process just described occurs only on Emulab constructed operating system images. If you are using an OSKit kernel, or your own disk image with your own operating system, you will be responsible for all of the configuration. At some point we hope to provide tools to assist in the configuration, but for now you are on your own. Ask <a class="ext-link" href="mailto:testbed-ops@flux.utah.edu"><span class="icon">Testbed Ops</span></a> for help or more information.

<a name="section-7"></a>
<h3 id="Ineedrootaccess">I need <strong>root</strong> access!</h3>
If you need to customize the configuration, or perhaps reboot nodes, you can use the "sudo" command, located in <tt>/usr/local/bin</tt> on FreeBSD and Linux, and <tt>/usr/pkg/bin</tt> on NetBSD. All users are added to the Administrators group on <a class="wiki" href="https://wiki.emulab.net/wiki/Emulab/wiki/Windows">Windows XP</a> nodes. Our policy is very liberal; you can customize the configuration in any way you like, provided it does not violate Emulab's <a class="wiki" href="https://wiki.emulab.net/wiki/Emulab/wiki/AdminPolicies">administrative policies</a>. As as example, to reboot a node that is running FreeBSD:
<pre class="wiki">  	/usr/local/bin/sudo reboot
</pre>
<a name="section-8"></a>
<h3 id="Mynodeiswedged">My node is wedged!</h3>
This is bound to happen when running experimental software and/or experimental operating systems. Fortunately we have an easy way for you to power cycle nodes without requiring Tested Operations to get involved. If you must power cycle a node, log on to users.emulab.net and use the "node_reboot" command:
<pre class="wiki">  	node_reboot  [node ... ]
</pre>
where <tt>node</tt> is the physical name, as listed in the node mapping table. You may provide more than one node on the command line. Be aware that you may power cycle only nodes in projects that you are member of. Also, <tt>node_reboot</tt> does its very best to perform a clean reboot before resorting to cycling the power to the node. This is to prevent the damage that can occur from constant power cycling over a long period of time. For this reason, <tt>node_reboot</tt> may delay a minute or two if it detects that the machine is still responsive to network transmission. In any event, please try to reboot your nodes first (see above). You may also reboot all the nodes in an experiment by using the <tt>-e</tt> option to specify the project and experiment names. For example:
<pre class="wiki">  	node_reboot -e testbed,multicast
</pre>
will reboot all of the nodes reserved in the "multicast" experiment in the "testbed" project. This option is provided as a shorthand method for rebooting large groups of nodes.

<a name="section-9"></a>
<h3 id="Ivescroggedmydisk">I've scrogged my disk!</h3>
Scrogging your disk is certainly not as common, but it does happen. You can either terminate your experiment, and recreate it (which will allocate another group of nodes), or if you prefer you can reload the disk image yourself. You will of course lose anything you have stored on that disk; it is a good idea to store only data that can be easily recreated, or else store it in your project directory in <tt>/proj</tt>. Reloading your disk with a fresh copy of the default image is easy, and requires no intervention by Emulab staff:
<pre class="wiki">  	os_load  [node ... ]
</pre>
os_load will wait (not exit) until the nodes have been reloaded, so that you do not need to check the console lines of each node to determine when the load is done.

<a name="section-10"></a>
<h3 id="Ivefinishedmyexperiment">I've finished my experiment</h3>
When your experiment is completed, and you no longer need the resources that have been allocated to it, you will need to terminate the experiment via the Emulab Web Interface. Click on the "End An Experiment" link. You will be presented with a list of all of the experiments in all of the projects for which you have the authorization to terminate experiments. Select the experiment you want to terminate by clicking on the button in the "Terminate" column on the right hand side. You will be asked to <strong>confirm</strong> your choice. The Emulab configuration system will then tear down your experiment, and send you an email message when the process is complete. At this point you are allowed to reuse the experiment name (say, if you wanted to create a similar experiment with different parameters).

<a name="Halting"></a>

<a name="section-11"></a>
<h3 id="Schedulingexperimentswapouttermination">Scheduling experiment swapout/termination</h3>
If you expect that your experiment should run for a set period of time, but you will not be around to terminate or swap the experiment out, then you should use the scheduled swapout/termination feature. This allows you to specify a maximum running time in your NS file so that you will not hold scarce resources when you are offline. This can also be used in conjunction with <a href="https://wiki.emulab.net/wiki/Tutorial#BatchMode">'batch mode'</a>experiments to ensure that they do not run longer than is reasonably expected. To schedule a swapout or termination in your NS file:
<pre class="wiki">     $ns at 2000.0 "$ns terminate"
   or
     $ns at 2000.0 "$ns swapout"
</pre>
This will cause your experiment to either be terminated or swapped out after 2000 seconds of wallclock time.

<a name="section-12"></a>
<h3 id="GettingHelp1">Getting Help!</h3>
If you have any questions or problems, or just want to comment on Emulab's operation (maybe you want to suggest an improvement to one of the Web pages), feel free to contact us by sending email to <a class="ext-link" href="http://www.emulab.net/sendemail.php3"><span class="icon">Testbed Operations</span></a>. Please send all correspondence to this address, not to individual members of our team. Messages that aren't on this list may not get responses. Also note that much of the software is in development, and occasionally things might break or not work as you expect. Again, please feel free to contact us.

<hr />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2018-03-23 16:44:11</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:44:11</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>nsfile</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XML Configuration Parameters</title>
		<link>https://gtelbatutorial.wordpress.com/xml-configuration-parameters/</link>
		<pubDate>Fri, 23 Mar 2018 16:46:40 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=30</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Experiment XML Configuration Parameters</h4>
<ul>
<a class="button" href="https://gtelbatutorial.wordpress.com/2018/02/22/introduction-to-elba">Home</a>
	<li>Experiment Configuration Parameters:
<ul>
	<li>RUBBOS-CONF
<ul>
	<li>controls the operation of the Rubbos benchmark</li>
	<li><em>connection_pool_size</em> controls the Tomcat connection pool size</li>
	<li><em>dist_of_requests</em> determines the distribution of the request types that are generated</li>
	<li><em>think_time</em> mimics the time human users take to make their next request</li>
	<li><em>removeBinFiles</em> controls whether binary file outputs are kept or not</li>
	<li>monitoring parameters:
* collectl
* iostatMonitor
* psMonitor * sarMonitor
* XML_ENABLED</li>
</ul>
</li>
	<li>APACHE-CONF
<ul>
	<li>contains standard parameters for Apache's configuration</li>
	<li>consult Apache configuration file for more information</li>
</ul>
</li>
	<li>TOMCAT-CONF
<ul>
	<li>contains standard parameters for Tomcat's configuration</li>
	<li>consult Tomcat configuration file for more information</li>
</ul>
</li>
	<li>MYSQL-CONF
<ul>
	<li><em>COME BACK TO THIS</em></li>
	<li>can contain parameters specifically for the clustered mysql configuration; however, if a cluster node is not present then it won't affect the experiment's execution</li>
	<li><em>mysql_tarball_rt</em> is a deprecated parameter; was originally tied to logging and sampling</li>
</ul>
</li>
	<li>LOGGING
<ul>
	<li>contains parameters for turning on/off particular monitoring tools</li>
	<li>does contain a special parameter for mysql to log slow running queries</li>
	<li>also drives sampling frequency, which is largely deprecated at this point given our experimental approach</li>
	<li>much of this was formerly implemented by Yasu</li>
	<li>mysqlResponseTime: <em>deprecated</em> this should remain <em>false</em></li>
</ul>
</li>
	<li>QINGYANG
<ul>
	<li>implemented for testing the effects of (bursty) workloads when nodes are physically consolidated</li>
	<li><em>qyclient</em> parameter modifies the Rubbos benchmark's client generator to output specific types of requests</li>
</ul>
</li>
	<li><em>Dependencies</em>:
<ul>
	<li>Name of the experiment in this XML file must match the name of the experiment as input into the web console of the cloud environment</li>
</ul>
</li>
</ul>
</li>
	<li>Cloud Environment Parameters:
<ul>
	<li>The following concerns the identifiers given to nodes in the Experiment XML with <code></code> tag</li>
	<li><em>CMU/Marmot Cluster</em>: Nodes in this cluster have multiple networking interfaces. So, the hostnames for each of the nodes must include the appropriate device i.e. "<em>hostname</em>.eth1"</li>
	<li><em>ElbaCluster</em>: Nodes can only be addressed using their IP address. As such, these nodes can only be accessed using their physical IP address. In addition, nodes can only be accessed using "root@<em>ipaddress</em>"</li>
	<li><em>Emulab</em> : Nodes do not need to specifiy specific device or IP addresses; they can just be logical names like "node1, etc"</li>
</ul>
</li>
	<li>Permissions and Images:
<ul>
	<li>If using the FC15RubOral image, then make sure the "USE_EXISTING_IMAGE" flag is set to "Yes."</li>
	<li>This ensures the generator outputs a script to change the default owner and permissions of the directories of interest for the experiment</li>
	<li>There have been instances where a permissions error might appear for <code>/mnt/elba</code>directory. However, this does not impact the installation of software in this directory or the overall operation of the experiment.</li>
	<li>Failure to change the permissions associated these directories can result in installation failures</li>
	<li>Operating system images need to have file system permissions updated with the userid executing the experiment. Two options for handling:
<ul>
	<li>run script to change permissions after mounting filesystem on each node</li>
	<li>create a new image that already contains the modified permissions</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2018-03-23 16:46:40</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:46:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>xml-configuration-parameters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NSFile Resources</title>
		<link>https://gtelbatutorial.wordpress.com/nsfile-example/</link>
		<pubDate>Fri, 23 Mar 2018 16:56:04 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=34</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>NSFile Example</h4>
Copy and paste this into a text editor and upload to the form that appears when you select begin new experiment on <em>Emulab.net. </em>

Sample NSFile for describing a topology with the following:
<ul>
	<li>1 Controller -- controls the setup and tear down of the other nodes</li>
	<li>1 Benchmark, 1 Client -- generate requests to the system</li>
	<li>1-1-1-1 Apache-Tomcat-CJDBC-MySQL system topology</li>
	<li>All nodes deployed across 3 LANs
<pre><code>  set ns [new Simulator]
  source tb_compat.tcl
  
  set node1 [$ns node]
  tb-set-node-os $node1 FC15RubOral
  tb-set-hardware $node1 d710
  
  set node2 [$ns node]
  tb-set-node-os $node2 FC15RubOral
  tb-set-hardware $node2 d710
  
  set node3 [$ns node]
  tb-set-node-os $node3 FC15RubOral
  tb-set-hardware $node3 d710
  
  set node4 [$ns node]
  tb-set-node-os $node4 FC15RubOral
  tb-set-hardware $node4 d710
  
  set node5 [$ns node]
  tb-set-node-os $node5 FC15RubOral
  tb-set-hardware $node5 d710
  
  set node6 [$ns node]
  tb-set-node-os $node6 FC15RubOral
  tb-set-hardware $node6 d710
  
  set node7 [$ns node]
  tb-set-node-os $node7 FC15RubOral
  tb-set-hardware $node7 pc3000

  set node8 [$ns node]
  tb-set-node-os $node8 FC15RubOral
  tb-set-hardware $node8 pc3000

  set node9 [$ns node]
  tb-set-node-os $node9 FC15RubOral
  tb-set-hardware $node9 pc3000

  set node10 [$ns node]
  tb-set-node-os $node10 FC15RubOral
  tb-set-hardware $node10 pc3000

  set lan1 [$ns make-lan "$node1 $node2 $node3 $node4 $node5 $node6 $node7" 100Mb 0ms]
  set lan2 [$ns make-lan "$node7 $node8 $node9" 100Mb 0ms]
  set lan3 [$ns make-lan "$node9 $node10" 100Mb 0ms]		

  $ns rtproto Static
  $ns run</code></pre>
</li>
</ul>
<h4 id="EmulabFAQ:UsingtheTestbed:ResourcesTemporaryUnavailable">Emulab FAQ: Using the Testbed: Resources Temporary Unavailable</h4>
An error of this type is likely because there are insufficient free nodes of the right type at this time. To see how many nodes are available right now, or when nodes will be available in the future, check out the: <a class="icon" href="https://www.emulab.net/portal/resinfo.php">cluster status</a> page.

It is also possible that currently available nodes do not meet the criteria you specified, for example, you need 10Gb network interfaces but no nodes with such interfaces are available. The <a class="internal-link" href="https://wiki.emulab.net/wiki/wiki/UtahHardware">hardware overview page</a> is a good place to start in order to determine the capabilities of the available nodes.

Finally, even if there are nodes currently available, meeting your requirements, you may still get the message if the free nodes are <a class="ext-link" href="http://docs.emulab.net/reservations.html"><span class="icon">reserved</span></a> to another project. In this case, you might try making a <a class="icon" href="https://www.emulab.net/portal/reserve.php">reservation</a>.

Not sure how to proceed or have further questions about this error? Join the Emulab users group (emulab-users@grooglegroups.com) and ask a question. Be sure to include the error message in your question, and the name of your project and experiment.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2018-03-23 16:56:04</wp:post_date>
		<wp:post_date_gmt>2018-03-23 16:56:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>nsfile-example</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EmulabElba</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/emulabelba/</link>
		<pubDate>Sun, 25 Mar 2018 22:51:01 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/emulabelba.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2018-03-25 22:51:01</wp:post_date>
		<wp:post_date_gmt>2018-03-25 22:51:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>emulabelba</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/emulabelba.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/emulabelba.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1776;s:6:"height";i:1125;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/emulabelba.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1335082;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-03-25 at 6.54.48 PM</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/screen-shot-2018-03-25-at-6-54-48-pm/</link>
		<pubDate>Sun, 25 Mar 2018 22:55:21 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-25-at-6-54-48-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2018-03-25 22:55:21</wp:post_date>
		<wp:post_date_gmt>2018-03-25 22:55:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-03-25-at-6-54-48-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-25-at-6-54-48-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-25-at-6-54-48-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:532;s:6:"height";i:315;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-25-at-6-54-48-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:59743;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screenshot2LinearTutorial</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/screenshot2lineartutorial/</link>
		<pubDate>Sun, 25 Mar 2018 23:06:41 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screenshot2lineartutorial.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2018-03-25 23:06:41</wp:post_date>
		<wp:post_date_gmt>2018-03-25 23:06:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screenshot2lineartutorial</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screenshot2lineartutorial.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screenshot2lineartutorial.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1038;s:6:"height";i:736;s:4:"file";s:102:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screenshot2lineartutorial.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:295604;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-03-25 at 7.09.19 PM</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/screen-shot-2018-03-25-at-7-09-19-pm/</link>
		<pubDate>Sun, 25 Mar 2018 23:09:41 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-25-at-7-09-19-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2018-03-25 23:09:41</wp:post_date>
		<wp:post_date_gmt>2018-03-25 23:09:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-03-25-at-7-09-19-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-25-at-7-09-19-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-25-at-7-09-19-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:757;s:6:"height";i:389;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-25-at-7-09-19-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:112187;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screenshot3LinearTutorial</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/screenshot3lineartutorial/</link>
		<pubDate>Sun, 25 Mar 2018 23:14:34 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screenshot3lineartutorial.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2018-03-25 23:14:34</wp:post_date>
		<wp:post_date_gmt>2018-03-25 23:14:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screenshot3lineartutorial</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screenshot3lineartutorial.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screenshot3lineartutorial.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1033;s:6:"height";i:226;s:4:"file";s:102:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screenshot3lineartutorial.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:44904;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-03-25 at 7.22.57 PM</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/screen-shot-2018-03-25-at-7-22-57-pm/</link>
		<pubDate>Sun, 25 Mar 2018 23:25:10 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-25-at-7-22-57-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2018-03-25 23:25:10</wp:post_date>
		<wp:post_date_gmt>2018-03-25 23:25:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-03-25-at-7-22-57-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-25-at-7-22-57-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-25-at-7-22-57-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:877;s:6:"height";i:414;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-25-at-7-22-57-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:170040;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screenshot5Tutorial</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/screenshot5tutorial/</link>
		<pubDate>Sun, 25 Mar 2018 23:28:25 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screenshot5tutorial.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2018-03-25 23:28:25</wp:post_date>
		<wp:post_date_gmt>2018-03-25 23:28:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screenshot5tutorial</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screenshot5tutorial.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screenshot5tutorial.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1892;s:6:"height";i:826;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screenshot5tutorial.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:369039;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screenshot4Tutorial</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/screenshot4tutorial/</link>
		<pubDate>Sun, 25 Mar 2018 23:29:25 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screenshot4tutorial.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2018-03-25 23:29:25</wp:post_date>
		<wp:post_date_gmt>2018-03-25 23:29:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screenshot4tutorial</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screenshot4tutorial.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screenshot4tutorial.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1798;s:6:"height";i:851;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screenshot4tutorial.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:458914;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FAQs</title>
		<link>https://gtelbatutorial.wordpress.com/faqs/</link>
		<pubDate>Sun, 25 Mar 2018 23:56:54 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=56</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;
<ol>
	<li>There are two primary ways of distributing required software for experiments:
<ul>
	<li>custom images
<ul>
	<li>create a custom image with the appropriate configuration and software pre-loaded</li>
	<li>use the location of the pre-loaded software in the image as the value for the SOFTWARE_HOME paramter in the Experiment XML</li>
</ul>
</li>
	<li>use the <code>\proj</code> mounted file share on <em>emulab</em> to copy files to and from experimental nodes. The following <a href="https://wiki.emulab.net/wiki/kb81" rel="nofollow">link</a> contains additional information about this share.</li>
	<li>Note: Several of the images on <em>emulab</em> and <em>PRObE (cmu)</em> associated with the <em>Infosphere</em> project already have fully mounted filesystems</li>
</ul>
</li>
	<li>Some users use package managers like <code>yum</code> to install software like <em>collectl</em>; however, not all enviornments provide sufficient network access for package managers like <code>yum</code></li>
	<li>Ensure tarball versions specified in the Experiment XML are available at the location SOFTWARE_HOME references. For example, some of the typical follies include:
<ul>
	<li>Mysql 5.0.x instead of 5.5.x</li>
	<li>systat 7.x instead of systat 10.x</li>
	<li>Instrumted vs. Uninstrumented Rubbos benchmark files. Instrumented versions are prefixed with "CA-."</li>
</ul>
</li>
	<li>Some versions of operating systems do not support certain versions of monitoring tools (sysstat). For example, Fedora 15 does not support <em>systat 7.x</em></li>
	<li>Some of the software requires specific versions of Java
<ul>
	<li>Asynchronous version of Rubbos benchmark in addition to our tracing infrastructure requires at least Java 7</li>
	<li>Previous versions of the JVM have been shown to introduce performance penalties. As such, an uninstrumented version of the benchmark <em><strong>should not</strong></em> be executed with any version prior to Java 6.</li>
</ul>
</li>
</ol>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2018-03-25 23:56:54</wp:post_date>
		<wp:post_date_gmt>2018-03-25 23:56:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>faqs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NS Commands</title>
		<link>https://gtelbatutorial.wordpress.com/ns-commands/</link>
		<pubDate>Mon, 26 Mar 2018 14:35:33 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=67</guid>
		<description></description>
		<content:encoded><![CDATA[Testbed NS Command Extensions

In order to use the testbed specific commands you must include the following line near the top of your NS file (before any testbed commands are used):
<pre class="wiki">    source tb_compat.tcl</pre>
If you wish to use your file under NS you can use download <a class="attachment" href="https://wiki.emulab.net/Emulab/wiki/attachment/Tutorial/tb_compat.tcl">tb_compat.tcl</a>. Place it in the same directory as your NS file. When run in this way under NS the testbed commands will have no effect, but NS will be able to parse your file.
<h4>TCL, NS, and Node Names</h4>
In your file you will be creating nodes with something like:
<pre class="wiki">    set node1 [$ns node]
</pre>
What is really going on is that the simulator, represented by <tt>$ns</tt> is creating a new node, involving a bunch of internal data changes, and returning a reference to it which is stored in the variable <tt>node1</tt>. In almost all cases, when you need to refer to a node you will do it as <tt>$node1</tt>, the <tt>$</tt> indicating that you want the value of the variable <tt>node1</tt>, i.e. the reference to the node. Thus you will be issuing commands like:
<pre class="wiki">    $ns duplex-link $node1 $node2 100Mb 150ms DropTail
    tb-set-ip $node1 10.1.0.2
</pre>
(Note the <tt>$</tt>'s)

You will notice that when your experiment is setup the node names and such will be <tt>node1</tt>. This happens because the parser detects what variable you are using to store the node reference and uses that as the node name. In the case that you do something like:
<pre class="wiki">    set node1 [$ns node2]
    set A $node1
</pre>
The node will still be called <tt>node1</tt> as that was the first variable to contain the reference.

If you are dealing with many nodes you may store them in array, perhaps like this:
<pre class="wiki">    for {set i 0} {$i &lt; 4} {incr i} {
       set nodes($i) [$ns node]
    }
</pre>
In this case the names of the node will be <tt>nodes-0</tt>, <tt>nodes-1</tt>, <tt>nodes-2</tt>, <tt>nodes-3</tt>. (In other words, the <tt>(</tt> character is replaced with <tt>-</tt>, and <tt>)</tt> is removed.) This slightly different syntax is used to avoid any problems that <tt>()</tt> may cause later in the process. For example, the <tt>()</tt> characters cannot appear in DNS entries.

As a final note, everything said above for nodes applies equally to lans. I.e.:
<pre class="wiki">    set lan0 [$ns make-lan "$node0 $node1" 100Mb 0ms]
    tb-set-lan-loss $lan0 .02
</pre>
(Again, note the <tt>$</tt>'s)

Links can also be named just like nodes and lans. The names can then be used to set loss rates or IP addresses. This technique is the only way to set such attributes when there are multiple links between two nodes.
<pre class="wiki">    set link1 [$ns duplex-link $node0 $node1 100Mb 0ms DropTail]
    tb-set-link-loss $link1 0.05
    tb-set-ip-link $node0 $link1 10.1.0.128</pre>
<h4 id="CapturedNSfileparameters">Captured NS file parameters</h4>
A common convention when writing NS files is to place any parameters in an array named "opt" at the beginning of the file. For example:
<pre class="wiki">    set opt(CLIENT_COUNT) 5
    set opt(BW) 10mb;    Link bandwidth
    set opt(LAT) 10ms;   Link latency

   ...

    $ns duplex-link $server $router $opt(BW) $opt(LAT) DropTail

    for {set i 0} {$i &lt; $opt(CLIENT_COUNT)} {incr i} {
        set nodes($i) [$ns node]
	...
    }
    set serverprog [$server program-agent -command "starter.sh"]
</pre>
Normally, this convention is only used to help organize the parameters. In Emulab, however, the contents of the "opt" array are captured and made available to the emulated environment. For instance, the parameters are added as environment variables to any commands run by <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/eventsystem#PROGRAM">program-agents</a> (only available on recent FBSD410-STD and RHL90-STD images). So, in the above example of NS code, the "starter.sh" script will be able to reference parameters by name, like so:
<pre class="wiki">    #! /bin/sh

    echo "Testing with $CLIENT_COUNT clients."
    ...
</pre>
Note that the contents of the "opt" array are not ordered, so you should not reference other parameters and expect the shell to expand them appropriately:
<pre class="wiki">    set opt(prefix) "/foo/bar"
    set opt(BINDIR) '$prefix/bin'; # BAD

    set opt(prefix) "/foo/bar"
    set opt(BINDIR) "$opt(prefix)/bin"; # Good</pre>
<h4 id="OrderingIssues">Ordering Issues</h4>
tb- commands have the same status as all other Tcl and NS commands. Thus the order matters not only relative to each other but also relative to other commands. One common example of this is that IP commands must be issued after the links or lans are created.
<h4 id="HardwareCommands">Hardware Commands</h4>
<h4>1. tb-set-hardware</h4>
<p style="padding-left:30px;"><tt>tb-set-hardware </tt><i><tt>node</tt></i><tt> </tt><i><tt>type</tt></i><tt> [</tt><i><tt>args</tt></i><tt>]</tt></p>
<p style="padding-left:30px;"><tt>tb-set-hardware $node3 pc</tt>
<tt>tb-set-hardware $node4 shark</tt></p>
<i>node</i> - The name of the node.
<i>type</i> - The type of the node.

Notes:
<ul>
	<li>Please see the <a class="ext-link" href="https://www.emulab.net/nodecontrol_list.php3"><span class="icon">Node Status</span></a> page for a list of available types. <tt>pc</tt> is the default type.</li>
	<li>No current types have any additional arguments.</li>
</ul>
<h4 id="IPAddressCommands">IP Address Commands</h4>
Each node will be assigned an IP address for each interface that is in use. The following commands will allow you to explicitly set those IP addresses. IP addresses will be automatically generated for all nodes that you do not explicitly set IP addresses.

In the common case the IP addresses on either side of a link must be in the same subnet. Likewise, all IP addresses on a LAN should be in the same subnet. Generally the same subnet should not be used for more than one link or LAN in a given experiment, nor should one node have multiple interfaces in the same subnet. Automatically generated IP addresses will conform to these requirements. If part of a link or lan is explicitly specified with the commands below then the remainder will be automatically generated under the same subnet.

IP address assignment is deterministic and tries to fill lower IP's first, starting at 2. Except in the partial specification case (see above), all automatic IP addresses are in the network <tt>10</tt>.
<h4 id="tb-set-ip" style="padding-left:30px;">1. tb-set-ip</h4>
<p style="padding-left:30px;"><tt>tb-set-ip </tt><i><tt>node</tt></i><tt> </tt><i><tt>ip</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-ip $node1 142.3.4.5</tt></p>
<i>node</i> - The node to assign the IP address to
<i>ip</i> - The IP address.

Notes:
<ul>
	<li>This command should only be used for nodes that have a single link. For nodes with multiple links the following commands should be used. Mixing <tt>tb-set-ip</tt> and any other IP command on the same node will result in an error.</li>
</ul>
<h4 id="tb-set-ip-link" style="padding-left:30px;">2. tb-set-ip-link</h4>
<p style="padding-left:30px;"><tt>tb-set-ip-link </tt><i><tt>node</tt></i><tt> </tt><i><tt>link</tt></i><tt> </tt><i><tt>ip</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-ip-link $node0 $link0 142.3.4.6</tt></p>
<i>node</i> - The node to set the IP for.
<i>link</i> - The link to set the IP for.
<i>ip</i> - The IP address.

Notes:
<ul>
	<li>One way to think of the arguments is a link with the node specifying which side of the link to set the IP for.</li>
	<li>This command can not be mixed with <tt>tb-set-ip</tt> on the same node.</li>
</ul>
<h4 id="tb-set-ip-lan" style="padding-left:30px;">3. tb-set-ip-lan</h4>
<p style="padding-left:30px;"><tt>tb-set-ip-lan </tt><i><tt>node</tt></i><tt> </tt><i><tt>lan</tt></i><tt> </tt><i><tt>ip</tt></i>
<tt>tb-set-ip-lan $node1 $lan0 142.3.4.6</tt></p>
<i>node</i> - The node to set the IP for.
<i>lan</i> - The lan the IP is on.
<i>ip</i> - The IP address.

Notes:
<ul>
	<li>One way to think of the arguments is a node with the LAN specifying which port to set the IP address for.</li>
	<li>This command can not be mixed with <tt>tb-set-ip</tt> on the same node.</li>
</ul>
<h4 id="tb-set-ip-interface" style="padding-left:30px;">4. tb-set-ip-interface</h4>
<p style="padding-left:30px;"><tt>tb-set-ip-interface </tt><i><tt>node</tt></i><tt> </tt><i><tt>dst</tt></i><tt> </tt><i><tt>ip</tt></i>
<tt>tb-set-ip-interface $node2 $node1 142.3.4.6</tt></p>
<i>node</i> - The node to set the IP for.
<i>dst</i> - The destination of the link to set the IP for.
<i>IP</i> - The IP address.

Notes:
<ul>
	<li>This command can not be mixed on the same node with <tt>tb-set-ip</tt>. (See above)</li>
	<li>In the case of multiple links between the same pair of nodes there is no way to distinguish which link to the set the IP for. This should be fixed soon.</li>
	<li>This command is converted internally to either tb-set-ip-link or tb-set-ip-lan. It is possible that error messages will report either of those commands instead of tb-set-ip-interface.</li>
</ul>
<h4 id="tb-set-netmask" style="padding-left:30px;">5. tb-set-netmask</h4>
<p style="padding-left:30px;"><tt>tb-set-netmask </tt><i><tt>lanlink</tt></i><tt> </tt><i><tt>netmask</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-netmask $link0 "255.255.255.248"</tt></p>
<i>lanlink</i> - The lan or link to set the netmask for.
<i>netmask</i> - The netmask in dotted notation.

Notes:
<ul>
	<li>This command sets the netmask for a lan or link. The mask must be big enough to support all of the nodes on the lan or link!</li>
	<li>You may play with the bottom three octets (0xFFFFFXXX) of the mask; attempts to change the upper octets will cause an error.</li>
</ul>
<h4 id="tb-set-node-routable-ip" style="padding-left:30px;">6. tb-set-node-routable-ip</h4>
<p style="padding-left:30px;"><tt>tb-set-node-routable-ip </tt><i><tt>node</tt></i><tt> </tt><i><tt>onoff</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-routable-ip $node0 1</tt></p>
<i>node</i> - The node to which a public (routable) IP address should be allocated.
<i>onoff</i> - 1 if you want a public address.

Notes:
<ul>
	<li>This command indicates that the designated node should be allocated a public IP address on its control network interface when <i>onoff</i> is set to 1.</li>
	<li>It is only meaningful for virtual nodes (e.g. for one you have used <tt>tb-set-hardware</tt> to choose a type <tt>pcvm</tt>). Physical nodes already have public control addresses by default; this command has no effect for them.</li>
</ul>
<h4 id="OSCommands">OS Commands</h4>
<h4 id="tb-set-node-os" style="padding-left:30px;">1. tb-set-node-os</h4>
<p style="padding-left:30px;"><tt>tb-set-node-os </tt><i><tt>node</tt></i><tt> </tt><i><tt>os</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-os $node1 FBSD-STD</tt>
<tt>tb-set-node-os $node1 MY_OS</tt></p>
<i>node</i> - The node to set the OS for.
<i>os</i> - The id of the OS for that node.

Notes:
<ul>
	<li>The OSID can either by one of the standard OS's we provide or a custom OSID, created via the web interface.</li>
	<li>If no OS is specified for a node a default OS is chosen based on the nodes type. This is currently RHL-STD for PCs.</li>
	<li>The currently available standard OS types are: FBSD-STD, RHL-STD, <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/Windows">WINXP-UPDATE</a>, NBSD14-STD (should not be used on PC nodes), and NETBOOT-STD (oskit netboot kernel for loading other operating systems over the network). <a class="ext-link" href="http://www.emulab.net/kb-show.php3?xref_tag=SWS-WIN2K"><span class="icon">Windows 2000</span></a> is not supported. Click <a class="ext-link" href="https://www.emulab.net/showosid_list.php3"><span class="icon">List ImageIDs and OSIDs</span></a> in the Emulab web interface "Interaction" pane to see the current list of Emulab-supplied OSs.</li>
</ul>
<h4 id="tb-set-node-rpms" style="padding-left:30px;">2. tb-set-node-rpms</h4>
<p style="padding-left:30px;"><tt>tb-set-node-rpms </tt><i><tt>node</tt></i><tt> </tt><i><tt>rpms...</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-rpms $node0 rpm1 rpm2 rpm3</tt></p>
Notes:
<ul>
	<li>This command sets which rpms are to be installed on the node when it first boots after being assigned to an experiment.</li>
	<li>Each rpm can be either a path to a file or a URL. Paths must be to files that reside in /proj or /groups. You are not allowed to place your rpms in your home directory. <tt>http(s)://</tt> and <tt>ftp://</tt> URLs will be fetched into the experiment's directory, and re-distributed from there.</li>
	<li>See the <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/Tutorial">tutorial</a> for more information.</li>
</ul>
<h4 id="tb-set-node-startcmd" style="padding-left:30px;">3. tb-set-node-startcmd</h4>
<p style="padding-left:30px;"><tt>tb-set-node-startcmd </tt><i><tt>node</tt></i><tt> </tt><i><tt>startupcmd</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-startcmd $node0 "mystart.sh -a &gt;&amp; /tmp/node0.log"</tt></p>
Notes:
<ul>
	<li>Specify a script or program to be run when the node is booted.</li>
	<li>See the <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/Tutorial">tutorial</a> for more information.</li>
</ul>
<h4 id="tb-set-node-cmdline" style="padding-left:30px;">4. tb-set-node-cmdline</h4>
<p style="padding-left:30px;"><tt>tb-set-node-cmdline </tt><i><tt>node</tt></i><tt> </tt><i><tt>cmdline</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-cmdline $node0 {???}</tt></p>
Notes:
<ul>
	<li>Set the command line, to be passed to the <i>kernel</i> when it is booted.</li>
	<li>Currently, this is supported on OSKit kernels only.</li>
</ul>
<h4 id="tb-set-node-tarfiles" style="padding-left:30px;">5. tb-set-node-tarfiles</h4>
<p style="padding-left:30px;"><tt>tb-set-node-tarfiles </tt><i><tt>node</tt></i><tt> </tt><i><tt>install-dir1</tt></i><tt> </tt><i><tt>tarfile1</tt></i><tt> ...</tt></p>
The <tt>tb-set-node-tarfiles</tt> command is used to install one or more tar files onto a node's local disk. This command is useful for installing files that are used frequently, but will change very little during the course of your experiments. For example, if your software depends on a third-party library not provided in the standard disk images, you can produce a tarball and have the library ready for use on all the experimental nodes. Another example would be the data sets for your software. The benefit of installing files using this method is that they will reside on the node's local disk, so your experimental runs will not be disrupted by NFS traffic. Finally, you will want to avoid using this command if the files are changing frequently because the tars are only (re)installed when the nodes boot.

Installing individual tar files or RPMs is a midpoint in the spectrum of getting software onto the experimental nodes. At one extreme, you can read everything over NFS, which works well if the files are changing constantly, but can generate a great deal of strain on the control network and disrupt your experiment. The tar files and RPMs are also read over NFS when the nodes initially boot, however, there won't be any extra NFS traffic while you are running your experiment. Finally, if you need a lot of software installed on a large number of nodes, say greater than 20, it might be best to create a <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/Tutorial">custom disk image</a>. Using a disk image is easier on the control network since it is transferred using multicast, thus greatly reducing the amount of NFS traffic when the experiment is swapped in.

<i>Required Parameters:</i>
<ul>
	<li><i>node</i> - The node where the files should be installed. Each node has its own tar file list, which may or may not be different from the others.</li>
	<li>One or more <i>install-dir</i> and <i>tarfile</i> pairs are then listed in the order you wish them to be installed:
<ul>
	<li><i>install-dir</i> - An existing directory on the node where the tar file should be unarchived (e.g. '/', '/usr', '/usr/local'). The "tar" command will be run as "root" <a href="https://wiki.emulab.net/wiki/nscommands#tb-set-node-tarfiles">Note1</a>, so all of the node's directories will be accessible to you. If the directory does not exist on the image or was not created by the unarchiving of a previous tar file, the installation will fail <a href="https://wiki.emulab.net/wiki/nscommands#tb-set-node-tarfiles">Note2</a>.</li>
	<li><i>tarfile</i> - An existing tar file located in a project directory (e.g. '/proj' or '/groups') or an http, https, or ftp URL. In the case of URLs, they are downloaded when the experiment is swapped in and cached in the experiment's directory for future use. In either case, the tar file name is <i>required</i> to have one of the following extensions: .tar, .tar.Z, .tar.gz, or .tgz. Note that the tar file could have been created anywhere, however, if you want the unarchived files to have valid Emulab user and group id's, you should create the tar file on ops or an experimental node.</li>
</ul>
</li>
</ul>
<i>Example usage:</i>
<pre class="wiki"># Overwrite files in /bin and /sbin.
tb-set-node-tarfiles $node0 /bin /proj/foo/mybinmods.tar /sbin /proj/foo/mysbinmods.tar

# Programmatically generate the list of tarballs.
set tb [list]
# Add a tarball located on a web site.
lappend tb / http://foo.bar/bazzer.tgz
# Add a tarball located in the Emulab NFS space.
lappend tb /usr/local /proj/foo/tarfiles/bar.tar.gz
# Use 'eval' to expand the 'tb' list into individual
# arguments to the tb-set-node-tarfiles command.
eval tb-set-node-tarfiles $node1 $tb
</pre>
<i>See also:</i>
<ul>
	<li><a href="https://wiki.emulab.net/wiki/nscommands#tb-set-node-rpms">`tb-set-node-rpms`</a></li>
	<li><a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/Tutorial">Custom disk images</a></li>
</ul>
<i>Notes:</i>
<ol>
	<li>Because the files are installed as root, care must be taken to protect the tar file so it cannot be replaced with a trojan that allowed less privileged users to become root.</li>
	<li>Currently, you can only tell how/why an installation failed by examining the node's console log on bootup.</li>
</ol>
<h4 id="tb-set-tarfiles" style="padding-left:30px;">6. tb-set-tarfiles</h4>
<p style="padding-left:30px;"><tt>tb-set-tarfiles </tt><i><tt>install-dir1</tt></i><tt> </tt><i><tt>tarfile1</tt></i><tt> ...</tt></p>
<p style="padding-left:30px;">or</p>
<p style="padding-left:30px;"><tt>tb-set-tarfiles </tt><i><tt>install-dir1</tt></i><tt> </tt><i><tt>tarfile1</tt></i>
<tt>tb-set-tarfiles </tt><i><tt>install-dir2</tt></i><tt> </tt><i><tt>tarfile2</tt></i>
<tt>...</tt></p>
Like <tt>tb-set-node-tarfiles</tt> but installs the tarfiles to all pcs in the experiment.

It uses multicast (frisbee) to distribute the tarfiles to all nodes simultaneously so it currently scales better than <tt>tb-set-node-tarfiles</tt>. Hence, it is practical to use this with large tarfiles, unlike <tt>tb-set-node-tarfiles</tt>.

<i>Notes:</i>
<ol>
	<li>This feature requires a fairly recent version of the testbed client-side software to be installed. Currently the following images are supported: FBSD73-STD.</li>
	<li>Tarfiles specified with tb-set-tarfiles will only get installed once on experiment first swapin. To force a reinstall remove the file "/var/emulab/boot/rc.blobs-ran". on the node.</li>
	<li>tb-set-tarfiles will refuse to install tarballs when the target directory is an NFS-mounted filesystem.</li>
	<li>If the target directory starts with "/local", each node will automatically create a large local filesystem (using mkextrafs) mounted on "/local" prior to insatlling the tarballs.</li>
</ol>
<h4 id="LinkLossCommands">Link Loss Commands</h4>
This is the NS syntax for creating a link:
<pre class="wiki">$ns duplex-link $node1 $node2 100Mb 150ms DropTail
</pre>
Note that it does not allow for specifying link loss rates. Emulab does, however, support link loss. The following commands can be used to specify link loss rates.
<h4 id="tb-set-link-loss" style="padding-left:30px;">1. tb-set-link-loss</h4>
<p style="padding-left:30px;"><tt>tb-set-link-loss </tt><i><tt>src</tt></i><tt> </tt><i><tt>dst</tt></i><tt> </tt><i><tt>loss</tt></i>
<tt>tb-set-link-loss </tt><i><tt>link</tt></i><tt> </tt><i><tt>loss</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-link-loss $node1 $node2 0.05</tt>
<tt>tb-set-link-loss $link1 0.02</tt></p>
<i>src</i>, <i>dst</i> - Two nodes to describe the link.
<i>link</i> - The link to set the rate for.
<i>loss</i> - The loss rate (between 0 and 1).

Notes:
<ul>
	<li>There are two syntax's available. The first specifies a link by a source/destination pair. The second explicitly specifies the link.</li>
	<li>The source/destination pair is incapable of describing an individual link in the case of multiple links between two nodes. Use the second syntax for this case.</li>
</ul>
<h4 id="tb-set-lan-loss" style="padding-left:30px;">2. tb-set-lan-loss</h4>
<p style="padding-left:30px;"><tt>tb-set-lan-loss </tt><i><tt>lan</tt></i><tt> </tt><i><tt>loss</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-lan-loss $lan1 0.3</tt></p>
<i>lan</i> - The lan to set the loss rate for.
<i>loss</i> - The loss rate (between 0 and 1).

Notes:
<ul>
	<li>This command sets the loss rate for the entire LAN.</li>
</ul>
<h4 id="tb-set-node-lan-delay" style="padding-left:30px;">3. tb-set-node-lan-delay</h4>
<p style="padding-left:30px;"><tt>tb-set-node-lan-delay </tt><i><tt>node</tt></i><tt> </tt><i><tt>lan</tt></i><tt> </tt><i><tt>delay</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-lan-delay $node0 $lan0 40ms</tt></p>
<i>node</i> - The node we are modifying the delay for.
<i>lan</i> - Which LAN the node is in that we are affecting.
<i>delay</i> - The new node to switch delay (see below).

Notes:
<ul>
	<li>This command changes the delay between the node and the switch of the LAN. This is only half of the trip a packet must take. The packet will also traverse the switch to the destination node, possibly incurring additional latency from any delay parameters there.</li>
	<li>If this command is not used to overwrite the delay, then the delay for a given node to switch link is taken as one half of the delay passed to <tt>make-lan</tt>. Thus in a LAN where no <tt>tb-set-node-delay</tt> calls are made the node to node latency will be the latency passed to <tt>make-lan</tt>.</li>
	<li>The behavior of this command is not defined when used with nodes that are in the same LAN multiple times.</li>
	<li>Delays of less than 2ms (per trip) are too small to be accurately modeled at this time, and will be silently ignored. As a convenience, a delay of 0ms can be used to indicate that you do not want added delay; the two interfaces will be "directly" connected to each other.</li>
</ul>
<h4 id="tb-set-node-lan-bandwidth" style="padding-left:30px;">4. tb-set-node-lan-bandwidth</h4>
<p style="padding-left:30px;"><tt>tb-set-node-lan-bandwidth </tt><i><tt>node</tt></i><tt> </tt><i><tt>lan</tt></i><tt> </tt><i><tt>bandwidth</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-lan-bandwidth $node0 $lan0 20Mb</tt></p>
<i>node</i> - The node we are modifying the bandwidth for.
<i>lan</i> - Which LAN the node is in that we are affecting.
<i>bandwidth</i> - The new node to switch bandwidth (see below).

Notes:
<ul>
	<li>This command changes the bandwidth between the node and the switch of the LAN. This is only half of the trip a packet must take. The packet will also traverse the switch to the destination node which may have a lower bandwidth.</li>
	<li>If this command is not used to overwrite the bandwidth, then the bandwidth for a given node to switch link is taken directly from the bandwidth passed to <tt>make-lan</tt>.</li>
	<li>The behavior of this command is not defined when used with nodes that are in the same LAN multiple times.</li>
</ul>
<h4 id="tb-set-node-lan-loss" style="padding-left:30px;">5. tb-set-node-lan-loss</h4>
<p style="padding-left:30px;"><tt>tb-set-node-lan-loss </tt><i><tt>node</tt></i><tt> </tt><i><tt>lan</tt></i><tt> </tt><i><tt>loss</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-lan-loss $node0 $lan0 0.05</tt></p>
<i>node</i> - The node we are modifying the loss for.
<i>lan</i> - Which LAN the node is in that we are affecting.
<i>loss</i> - The new node to switch loss (see below).

Notes:
<ul>
	<li>This command changes the loss probability between the node and the switch of the LAN. This is only half of the trip a packet must take. The packet will also traverse the switch to the destination node which may also have a loss chance. Thus for packet going to switch with loss chance A and then going on the destination with loss chance B the node to node loss chance is <tt>(1-(1-A)(1-B))</tt>.</li>
	<li>If this command is not used to overwrite the loss, then the loss for a given node to switch link is taken from the loss rate passed to the <tt>make-lan</tt> command. If a loss rate of L is passed to <tt>make-lan</tt> then the node to switch loss rate for each node is set to <tt>(1-sqrt(1-L))</tt>. Thus as each packet will have two such chances to be lost the node to loss rate comes out as the desired L.</li>
	<li>The behavior of this command is not defined when used with nodes that are in the same LAN multiple times.</li>
</ul>
<h4 id="tb-set-node-lan-params" style="padding-left:30px;">6. tb-set-node-lan-params</h4>
<p style="padding-left:30px;"><tt>tb-set-node-lan-params </tt><i><tt>node</tt></i><tt> </tt><i><tt>lan</tt></i><tt> </tt><i><tt>delay</tt></i><tt> </tt><i><tt>bandwidth</tt></i><tt> </tt><i><tt>loss</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-lan-params $node0 $lan0 40ms 20Mb 0.05</tt></p>
<i>node</i> - The node we are modifying the loss for.
<i>lan</i> - Which LAN the node is in that we are affecting.
<i>delay</i> - The new node to switch delay.
<i>bandwidth</i> - The new node to switch bandwidth.
<i>loss</i> - The new node to switch loss.

Notes:
<ul>
	<li>This command is exactly equivalent to calling each of the above three commands appropriately. See above for more information.</li>
</ul>
<h4 id="tb-set-link-simplex-params" style="padding-left:30px;">7. tb-set-link-simplex-params</h4>
<p style="padding-left:30px;"><tt>tb-set-link-simplex-params </tt><i><tt>link</tt></i><tt> </tt><i><tt>src</tt></i><tt> </tt><i><tt>delay</tt></i><tt> </tt><i><tt>bw</tt></i><tt> </tt><i><tt>loss</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-link-simplex-params $link1 $srcnode 100ms 50Mb 0.2</tt></p>
<i>link</i> - The link we are modifying.
<i>src</i> - The source, defining which direction we are modifying.
<i>delay</i> - The source to destination delay.
<i>bw</i> - The source to destination bandwidth.
<i>loss</i> - The source to destination loss.

Notes:
<ul>
	<li>This commands modifies the delay characteristics of a link in a single direction. The other direction is unchanged.</li>
	<li>This command only applies to links. Use <tt>tb-set-lan-simplex-params</tt> below for LANs.</li>
</ul>
<h4 id="tb-set-lan-simplex-params" style="padding-left:30px;">8. tb-set-lan-simplex-params</h4>
<p style="padding-left:30px;"><tt>tb-set-lan-simplex-params </tt><i><tt>lan</tt></i><tt> </tt><i><tt>node</tt></i><tt> </tt><i><tt>todelay</tt></i><tt> </tt><i><tt>tobw</tt></i><tt> </tt><i><tt>toloss</tt></i><tt> </tt><i><tt>fromdelay</tt></i><tt> </tt><i><tt>frombw</tt></i><tt> </tt><i><tt>fromloss</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-lan-simplex-params $lan1 $node1 100ms 10Mb 0.1 5ms 100Mb 0</tt></p>
<i>lan</i> - The lan we are modifying.
<i>node</i> - The member of the lan we are modifying.
<i>todelay</i> - Node to lan delay.
<i>tobw</i> - Node to lan bandwidth.
<i>toloss</i> - Node to lan loss.
<i>fromdelay</i> - Lan to node delay.
<i>frombw</i> - Lan to node bandwidth.
<i>fromloss</i> - Lan to node loss.

Notes:
<ul>
	<li>This command is exactly like <tt>tb-set-node-lan-params</tt> except that it allows the characteristics in each direction to be chosen separately. See all the notes for <tt>tb-set-node-lan-params</tt>.</li>
</ul>
<h4 id="tb-set-endnodeshaping" style="padding-left:30px;">9. tb-set-endnodeshaping</h4>
<p style="padding-left:30px;"><tt>tb-set-endnodeshaping </tt><i><tt>link-or-lan</tt></i><tt> </tt><i><tt>enable</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-endnodeshaping $link1 1</tt>
<tt>tb-set-endnodeshaping $lan1 1</tt></p>
<i>link-or-lan</i> - The link or LAN we are modifying.
<i>enable</i> - Set to 1 to enable, 0 to disable.

Notes:
<ul>
	<li>This command specifies whether <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/linkdelays">end node shaping</a> is used on the specified link or LAN (instead of a delay node).</li>
	<li>Disabled by default for all links and LANs.</li>
	<li>Only available when running the standard Emulab FreeBSD or Linux kernels.</li>
	<li>See <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/linkdelays">Node Traffic Shaping</a> for more details.</li>
</ul>
<h4 id="tb-set-noshaping" style="padding-left:30px;">10. tb-set-noshaping</h4>
<p style="padding-left:30px;"><tt>tb-set-noshaping </tt><i><tt>link-or-lan</tt></i><tt> </tt><i><tt>enable</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-noshaping $link1 1</tt>
<tt>tb-set-noshaping $lan1 1</tt></p>
<i>link-or-lan</i> - The link or LAN we are modifying.
<i>enable</i> - Set to 1 to disable bandwidth shaping, 0 to enable.

Notes:
<ul>
	<li>This command specifies whether link bandwidth shaping should be enforced on the specified link or LAN. When enabled, bandwidth limits indicated for a link or LAN will not be enforced.</li>
	<li>Disabled by default for all links and LANs. That is, link bandwidth shaping <i>is</i> enforced on all links and LANs by default.</li>
	<li>If the delay and loss values for a <tt>tb-set-noshaping</tt> link are zero (the default), then no delay node or end-node delay pipe will be associated with the link or LAN.</li>
	<li><strong>This command is a hack and may go away at any time! </strong>The primary purpose for this command is to subvert the topology mapper, <tt>assign</tt>). <tt>Assign</tt> always observes the physical bandwidth constraints of the testbed. By using <tt>tb-set-noshaping</tt>, you can convince <tt>assign</tt>that links are low-bandwidth and thus get your topology mapped, but then not actually have the links shaped.</li>
</ul>
<h4 id="tb-use-endnodeshaping" style="padding-left:30px;">11. tb-use-endnodeshaping</h4>
<p style="padding-left:30px;"><tt>tb-use-endnodeshaping </tt><i><tt>enable</tt></i></p>
<p style="padding-left:30px;"><tt>tb-use-endnodeshaping 1</tt></p>
<i>enable</i> - Set to 1 to enable end-node traffic shaping on all links and LANs.

Notes:
<ul>
	<li>This command allows you to use end-node traffic shaping globally, without having to specify per link or LAN with <tt>tb-set-endnodeshaping</tt>.</li>
	<li>See <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/linkdelays">Node Traffic Shaping</a> for more details.</li>
</ul>
<h4 id="tb-force-endnodeshaping" style="padding-left:30px;">12. tb-force-endnodeshaping</h4>
<p style="padding-left:30px;"><tt>tb-force-endnodeshaping </tt><i><tt>enable</tt></i></p>
<p style="padding-left:30px;"><tt>tb-force-endnodeshaping 1</tt></p>
<i>enable</i> - Set to 1 to force end-node traffic shaping on all links and LANs.

Notes:
<ul>
	<li>This command allows you to specify non-shaped links and LANs at creation time, but still control the shaping parameters later (e.g., increase delay, decrease bandwidth) after the experiment is swapped in.</li>
	<li>This command forces allocation of end-node shaping infrastructure for all links. There is no equivalent to force delay node allocation.</li>
	<li>See <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/linkdelays">Node Traffic Shaping</a> for more details.</li>
</ul>
<h4 id="tb-set-multiplexed" style="padding-left:30px;">13. tb-set-multiplexed</h4>
<p style="padding-left:30px;"><tt>tb-set-multiplexed </tt><i><tt>link</tt></i><tt> </tt><i><tt>allow</tt></i><tt></tt></p>
<p style="padding-left:30px;"><tt>tb-set-multiplexed $link1 1</tt></p>
<i>link</i> - The link we are modifying.
'allow<i> - Set to 1 to allow multiplexing of the link, 0 to disallow.</i>

Notes:
<ul>
	<li>This command allows a link to be multiplexed over a physical link along with other links.</li>
	<li>Disabled by default for all links.</li>
	<li>Only available when running the standard Emulab FreeBSD (not Linux) and only for links (not LANs).</li>
	<li>See <a class="wiki" href="https://wiki.emulab.net/Emulab/wiki/linkdelays">Multiplexed Links</a> for more details.</li>
</ul>
<h4 id="VirtualTypeCommands">Virtual Type Commands</h4>
Virtual Types are a method of defining fuzzy types. I.e. types that can be fulfilled by multiple different physical types. The advantage of virtual types (vtypes) is that all nodes of the same vtype will usually be the same physical type of node. In this way, vtypes allows logical grouping of nodes.

As an example, imagine we have a network with internal routers connecting leaf nodes. We want the routers to all have the same hardware, and the leaf nodes to all have the same hardware, but the specifics do not matter. We have the following fragment in our NS file:
<pre class="wiki">...
tb-make-soft-vtype router {pc600 pc850}
tb-make-soft-vtype leaf {pc600 pc850}

tb-set-hardware $router1 router
tb-set-hardware $router2 router
tb-set-hardware $leaf1 leaf
tb-set-hardware $leaf2 leaf
</pre>
Here we have set up two soft (see below) vtypes, router and leaf. Our router nodes are then specified to be of type <i>router</i>, and the leaf nodes of type <i>leaf</i>. When the experiment is swapped in the testbed will attempt to make router1 and router2 be of the same type, and similarly, leaf1 and leaf2 of the same type. However, the routers/leafs may be pc600s or they may be pc850s, whichever is easier to fit in to the available resources.

As a basic use, vtypes can be used to request nodes that are all the same type, but can be of any available type:
<pre class="wiki">...
tb-make-soft-vtype N {pc600 pc850}

tb-set-hardware $node1 N
tb-set-hardware $node2 N
</pre>
Vtypes come in two varieties, hard and soft. With soft vtypes, the testbed will try to make all nodes of that vtype the same physical type, but may do otherwise if resources are tight. Hard vtypes behave just like soft vtypes except that the testbed will give higher priority to vtype consistency and swapping in will fail if the vtypes can not be satisfied. So, if you use soft vtypes you are more likely to swap in but there is a chance your node of a specific vtype will not all be the same. If you use hard vtypes all nodes of a given vtype will be the same, but swapping in may fail.

Finally, you can have weighted soft vtypes. Here you assign a weight from 0 to 1 exclusive to your vtype. The testbed will give higher priority to consistency in the higher weighted vtypes. The primary use of this is to rank multiple vtypes by importance of consistency. Soft vtypes have a weight of 0.5 by default.

As a final note, when specifying the types of a vtype, use the most specific type possible. For example: tb-make-soft-vtype router {pc pc600}, is not very useful, as pc600 is a sub type of pc. You may very well end up with two routers as type pc with different hardware, as pc covers multiple types of hardware.
<h4 id="tb-make-soft-vtype" style="padding-left:30px;">1. tb-make-soft-vtype</h4>
<p style="padding-left:30px;"><tt>tb-make-soft-vtype </tt><i><tt>vtype</tt></i><tt> {</tt><i><tt>types</tt></i><tt>}</tt>
<tt>tb-make-hard-vtype </tt><i><tt>vtype</tt></i><tt> {</tt><i><tt>types</tt></i><tt>}</tt>
<tt>tb-make-weighted-vtype </tt><i><tt>vtype</tt></i><tt> </tt><i><tt>weight</tt></i><tt> {</tt><i><tt>types</tt></i><tt>}</tt></p>
<p style="padding-left:30px;"><tt>tb-make-soft-vtype router {pc600 pc850}</tt>
<tt>tb-make-hard-vtype leaf {pc600 pc850}</tt>
<tt>tb-make-weighted-vtype A 0.1 {pc600 pc850}</tt></p>
<i>vtype</i> - The name of the vtype to create.
<i>types</i> - One or more physical types.
<i>weight</i> - The weight of the vtype, 0 &lt; <i>weight</i> &lt; 1.

Notes:
<ul>
	<li>These commands create vtypes. See notes above for description of vtypes and the difference between soft and hard.</li>
	<li><tt>tb-make-soft-vtype</tt> creates vtypes with weight 0.5.</li>
	<li>vtype commands must appear before <tt>tb-set-hardware</tt> commands that use them.</li>
	<li>Do not used <tt>tb-fix-node</tt> with nodes that have a vtype.</li>
</ul>
<h4 id="Misc.Commands">Misc. Commands</h4>
<h4 id="tb-fix-node" style="padding-left:30px;">1. tb-fix-node</h4>
<p style="padding-left:30px;"><tt>tb-fix-node </tt><i><tt>vnode</tt></i><tt> </tt><i><tt>pnode</tt></i></p>
<p style="padding-left:30px;"><tt>tb-fix-node $node0 pc42</tt></p>
<i>vnode</i> - The node we are fixing.
<i>pnode</i> - The physical node we want used.

Notes:
<ul>
	<li>This command forces the virtual node to be mapped to the specified physical node. Swap in will fail if this can not be done.</li>
	<li>Do not use this command on nodes that are a virtual type.</li>
</ul>
<h4 id="tb-fix-interface" style="padding-left:30px;">2. tb-fix-interface</h4>
<p style="padding-left:30px;"><tt>tb-fix-interface </tt><i><tt>vnode</tt></i><tt> </tt><i><tt>vlink</tt></i><tt> </tt><i><tt>iface</tt></i></p>
<p style="padding-left:30px;"><tt>tb-fix-interface $node0 $link0 "eth0"</tt></p>
<i>vnode</i> - The node we are fixing.
<i>vlink</i> - The link connecting to that node that we want to set.
<i>iface</i> - The Emulab name for the interface that is to be used.

Notes:
<ul>
	<li>The interface names used are the ones in the Emulab database - we can make no guarantee that the OS image that boots on the node assigns the same name.</li>
	<li>Different types of nodes have different sets of interfaces, so this command is most useful if you are also using <tt>tb-fix-node</tt> and/or <tt>tb-set-hardware</tt> on the <tt>vnode</tt>.</li>
</ul>
<h4 id="tb-set-uselatestwadata" style="padding-left:30px;">3. tb-set-uselatestwadata</h4>
<p style="padding-left:30px;"><tt>tb-set-uselatestwadata 0</tt>
<tt>tb-set-uselatestwadata 1</tt></p>
Notes:
<ul>
	<li>This command indicates which widearea data to use when mapping widearea nodes to links. The default is 0, which says to use the aged data. Setting it to 1 says to use the most recent data.</li>
</ul>
<h4 id="tb-set-wasolver-weights" style="padding-left:30px;">4. tb-set-wasolver-weights</h4>
<p style="padding-left:30px;"><tt>tb-set-wasolver-weights </tt><i><tt>delay bw plr</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-wasolver-weights 1 10 500</tt></p>
<i>delay</i> - The weight to give delay when solving.
<i>bw</i> - The weight to give bandwidth when solving.
<i>plr</i> - The weight to give lossrate when solving.

Notes:
<ul>
	<li>This command sets the relative weights to use when assigning widearea nodes to links. Specifying a zero says to ignore that particular metric when doing the assignment. Setting all three to zero results in an essentially random selection.</li>
</ul>
<h4 id="tb-set-node-failure-action" style="padding-left:30px;">5. tb-set-node-failure-action</h4>
<p style="padding-left:30px;"><tt>tb-set-node-failure-action </tt><i><tt>node action</tt></i></p>
<p style="padding-left:30px;"><tt>tb-set-node-failure-action $nodeA "fatal"</tt>
<tt>tb-set-node-failure-action $nodeB "nonfatal"</tt></p>
<i>node</i> - The node name.
<i>action</i> - One of "fatal" or "nonfatal"

Notes:
<ul>
	<li>This command sets the failure mode for a node. When an experiment is swapped in, the default action is to abort the swapin if any nodes fail to come up normally. This is the "fatal" mode. You may also set a node to "nonfatal" which will cause node bootup failures to be reported, but otherwise ignored during swapin. Note that this can result in your experiment not working properly if a dependent node fails, but typically you can arrange your software to deal with this.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2018-03-26 14:35:33</wp:post_date>
		<wp:post_date_gmt>2018-03-26 14:35:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ns-commands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cloud Deployment</title>
		<link>https://gtelbatutorial.wordpress.com/cloud-deployment/</link>
		<pubDate>Mon, 26 Mar 2018 15:03:47 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=87</guid>
		<description></description>
		<content:encoded><![CDATA[[This page will discuss which Cloud the user decides to deploy on]
<h4>Research Challenges</h4>
<ul style="font-weight:400;">
	<li>ROI can be improved (a lot)​</li>
	<li>A challenging problem: latency long tail​
<ul>
	<li>Very long response time (VLRT) requests​</li>
	<li>Difficult to reproduce, almost invisible​</li>
	<li>We found 3, but there are many more​</li>
</ul>
</li>
	<li>Cause-specific bug fixes are limited to each case​
<ul>
	<li>Transient bottlenecks as a simple model for more generic solutions​</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date>2018-03-26 15:03:47</wp:post_date>
		<wp:post_date_gmt>2018-03-26 15:03:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cloud-deployment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Resource Monitors</title>
		<link>https://gtelbatutorial.wordpress.com/resource-monitors/</link>
		<pubDate>Mon, 26 Mar 2018 15:05:22 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=89</guid>
		<description></description>
		<content:encoded><![CDATA[[This page will discuss changing the resource monitors]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2018-03-26 15:05:22</wp:post_date>
		<wp:post_date_gmt>2018-03-26 15:05:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>resource-monitors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-03-28 at 6.53.26 PM</title>
		<link>https://gtelbatutorial.wordpress.com/experiment-customization/screen-shot-2018-03-28-at-6-53-26-pm/</link>
		<pubDate>Wed, 28 Mar 2018 22:55:39 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-6-53-26-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2018-03-28 22:55:39</wp:post_date>
		<wp:post_date_gmt>2018-03-28 22:55:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-03-28-at-6-53-26-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>21</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-6-53-26-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-28-at-6-53-26-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1200;s:6:"height";i:328;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-28-at-6-53-26-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:91824;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Analysis</title>
		<link>https://gtelbatutorial.wordpress.com/experiment-analysis/</link>
		<pubDate>Wed, 28 Mar 2018 23:18:57 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=102</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Analysis Outline</h4>
<ol>
	<li>Explain your approach to data transformation, integration, and management.</li>
	<li>Detail how you use the data gathered to isolate millibottlenecks and diagnose their root cause.</li>
	<li>Describe the steps needed to analyze your experiment:
<ol>
	<li>Copy the tarball archive containing the experiment data to a location proximate to the cloned Elba Github repository.</li>
	<li>Unzip the copied archive.</li>
	<li>Navigate to the parsers directory of the cloned Elba Github repository.</li>
	<li>Execute "runparsers.sh" by providing the following:
<ol>
	<li>Path to the directory containing the unzipped archive</li>
	<li>Target location to store the processing results</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4>milliScope Data Flow and Architecture</h4>
<img class="alignnone size-full wp-image-103" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-05-35-pm.png" alt="Screen Shot 2018-03-28 at 7.05.35 PM" width="868" height="373" />

The data transformation flow of milliScope. The event mScopeMonitors capture
timestamps, as shown in Figure 4, in the component logs, while the resource mScopeMonitors record the system resource utilization. mScopeDataTranformer converts these unstructured data to structured tuples and loads them into a dynamic data warehouse, mScopeDB, for advanced analysis.
<h4>milliAnalyst</h4>
<ul style="font-weight:400;">
	<li>Uniform data interface consisting of three entities:​
<ul>
	<li>PointinTime ​</li>
	<li>DownstreamServiceTime (DST)​</li>
	<li>ResourceObservations​</li>
</ul>
</li>
	<li>Each of these entities can have a variable number of number of attributes ​</li>
	<li>Experiment specification impacts this, i.e. the number of nodes determines the number of DST attributes​</li>
	<li>Number of attributes can also depend on characteristics that might not be known prior to running an experiment, such as a node’s number of CPUs, cores, NICs or disks​</li>
	<li>Method needs to handle this variable number of attributes, i.e. no fixed schemas​</li>
	<li>Method needs to be able to integrate data across time and space​</li>
	<li>Representation needs to be able to handle data anomalies and support efficient filtering and retrieval of small data subsets across all of the measurements​</li>
	<li>Support graph-based reasoning​</li>
</ul>
<span style="text-decoration:underline;">milliBottlenecks</span>
<ul style="font-weight:400;">
	<li>Millibottlenecks happen in different system layers​
<ul>
	<li>System software: Java garbage collection​</li>
	<li>Processor architecture: DVFS​</li>
	<li>Application Virtual Machine consolidation​</li>
</ul>
</li>
	<li>Though short-lived, millibottlenecks have big impact<b> </b>on n-tier application performance​
<ul>
	<li>VLRT requests​</li>
	<li>Queue amplification from n-tier system component dependencies​</li>
</ul>
</li>
</ul>
<img class="alignnone size-full wp-image-104" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-07-24-pm.png" alt="Screen Shot 2018-03-28 at 7.07.24 PM" width="818" height="434" />

Above is the work flow of milliBottleneck discovery. Users define the configuration file at first, and the script generator generates scripts which set up the experiment environment and deploy milliScope as well as other softwares. mScopeDataTransformer converts these unstructured data to structured tuples in mScopeDB as described in Figure 3 for advanced analysis.
<h4>Solutions</h4>
<ul style="font-weight:400;">
	<li>Three kinds of solutions for Latency Long Tail Problem​
<ul>
	<li>Bug-fix, specific solutions for each cause (many causes, not all can be fixed)​</li>
	<li>General solutions for transient bottlenecks (primarily improved queue management)​</li>
	<li>Last-resort solution​</li>
</ul>
</li>
	<li>Bug-Fix for Specific Solutions
<ul>
	<li>Some cases can be “fixed”​
<ul>
	<li>Java GC in JVM 1.5 was “fixed” in JVM 1.6​</li>
	<li>DVFS anti-synchrony can be “fixed” by changing control periods (some complications)​</li>
</ul>
</li>
	<li>Other cases are harder to fix​
<ul>
	<li>VM consolidation case (noisy neighbor) is really non-deterministic​</li>
</ul>
</li>
	<li>Kernel daemon processes (many)​</li>
</ul>
</li>
	<li>General Solutions
<ul>
	<li>Approaches that address transient bottlenecks (instead of specific “bugs”)​
<ul>
	<li>3 stages: (1) transient bottleneck formation, (2) queue amplification, (3) packet retransmission​</li>
</ul>
</li>
	<li>(1) Transient bottleneck detection and remedial action (e.g., disruption)​
<ul>
	<li>Difficult, due to the short lifespan of transient bottlenecks​</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2018-03-28 23:18:57</wp:post_date>
		<wp:post_date_gmt>2018-03-28 23:18:57</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>experiment-analysis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-03-28 at 7.05.35 PM</title>
		<link>https://gtelbatutorial.wordpress.com/experiment-analysis/screen-shot-2018-03-28-at-7-05-35-pm/</link>
		<pubDate>Wed, 28 Mar 2018 23:05:53 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-05-35-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2018-03-28 23:05:53</wp:post_date>
		<wp:post_date_gmt>2018-03-28 23:05:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-03-28-at-7-05-35-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>102</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-05-35-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-28-at-7-05-35-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:868;s:6:"height";i:373;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-28-at-7-05-35-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:80004;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-03-28 at 7.07.24 PM</title>
		<link>https://gtelbatutorial.wordpress.com/experiment-analysis/screen-shot-2018-03-28-at-7-07-24-pm/</link>
		<pubDate>Wed, 28 Mar 2018 23:07:56 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-07-24-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2018-03-28 23:07:56</wp:post_date>
		<wp:post_date_gmt>2018-03-28 23:07:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-03-28-at-7-07-24-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>102</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-07-24-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-28-at-7-07-24-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:818;s:6:"height";i:434;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/03/screen-shot-2018-03-28-at-7-07-24-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:57970;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SSH</title>
		<link>https://gtelbatutorial.wordpress.com/ssh/</link>
		<pubDate>Wed, 04 Apr 2018 17:30:48 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=116</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Instructions:</h4>
<ol>
	<li>Create a public RSA (SSH) key on your local ‘nix machine under a <b>bash</b> shell
<ol>
	<li>Manually Generating your SSH key in MacOS
<ol>
	<li>Open <b>Terminal</b>
<ol>
	<li>The Terminal window opens with the commandline prompt displaying the name of your machine and your username</li>
</ol>
</li>
	<li>Enter the following command in the Terminal window
<div class="stackedit__html">
<pre><code>cd ~/.ssh
  ssh-keygen -t rsa
</code></pre>
</div></li>
	<li>This starts the key generation process.  When you execute this command, the ssh-keygen utility prompt you to indicate where to store the key</li>
	<li>Press the ENTER key to accept the default location.  The ssh-keygen utility prompts you for a passphrase</li>
	<li>Type in a passphrase.  You can also hit the ENTER key to accept the default (no passphrase).  However, this is not recommended</li>
	<li>You will need to enter the passphrase a second time to continue.</li>
	<li>After you confirm the passphrase, the system generates the pair.<img class="alignnone size-full wp-image-44" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-25-at-6-54-48-pm.png" alt="Screen Shot 2018-03-25 at 6.54.48 PM" width="532" height="315" /></li>
	<li>Your private key is saved to the id_rsa file in the .ssh directory.</li>
	<li>Your public key is saved to the id_rsa.pub file.</li>
	<li>You can save this to the clipboard by running:</li> <pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub
</code></pre>
</div>

</ol>
</li>
</ol>
</li>
</ol>
4. Add the SSH key to your account by selecting “My Account” and then “Edit SSH keys” on the left hand side of the page.  This is where you would paste your SSH key from the prior step.

5. Email the Georgia Tech Elba team with your GitHub username to gain access into the GitHub repository
<ol>
	<li>Elba email address: <a href="mailto:Elba@cc.gatech.edu">Elba@cc.gatech.edu</a></li>
	<li>If you are unfamiliar with GitHub, please create an account at GitHub.com</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2018-04-04 17:30:48</wp:post_date>
		<wp:post_date_gmt>2018-04-04 17:30:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ssh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to the Elba Project</title>
		<link>https://gtelbatutorial.wordpress.com/?p=123</link>
		<pubDate>Wed, 04 Apr 2018 17:50:44 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/linear-tutorial/">Tutorial</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Topology</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Parameters</a> <a class="button" href="https://gtelbatutorial.wordpress.com/nsfile/">NSFiles</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/resource-monitors/">Resource Monitors</a> <a class="button" href="https://gtelbatutorial.wordpress.com/cloud-deployment/">Cloud Deployment</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/faqs/">FAQs</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-analysis/">Experiment Analysis</a>
<p style="text-align:left;"><b>Background.</b> One of the main research challenges in the Adaptive Enterprise vision is the automation of large application system management, encompassing design, deployment, to production use, and capturing application monitoring, evaluation, and evolution. Current approaches to enterprise system evaluation and tuning happen on production systems where the real workload to the deployed system is analyzed on-line and corresponding measurements are taken. In addition, many of these systems go through a detailed staging process that is mostly manual, complex and time-consuming. During the staging process the system to be produced is subjected to workloads to determine whether it will meet the production workloads. Finally, data gleaned from the staging process can be re-used to guide future designs and for management of system during operations.</p>
<b>Project Motivation.</b> We want to verify and test an application system deployment plan in a staging environment before committing it to a production environment. Manual verification of a deployment is cumbersome, time consuming, and error prone. This problem will grow in importance in the deployment of increasingly larger and more sophisticated applications. Therefore, it will be increasingly important to have an automatic method for executing a benchmark on the deployment plan to validate the deployment during staging, instead of debugging a deployment during production use.

<img class=" size-full wp-image-13 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg" alt="ELBA_ARCH" width="585" height="329" />
<h2>Contributions and Approaches</h2>
<h3>Automated Deployment and Staging Infrastructure</h3>
<b>Approach.</b> In our project we intend to automate the staging process thus reducing the time and manual labor involved in the process, increase confidence, and extract predictive performance data. Further, the automation will support a more thorough application test and validation in a larger state space, since we plan to automate the monitoring and analysis steps to speed up the refinement of application deployment. Our tools will translate a high-level specification of performance and availability (e.g., SLA requirements) into executable deployment, test, evaluation, and analysis code for the staging phase. This work builds on our experience and technology previously developed such as evaluation of SmartFrog and translation of Quartermaster design specifications into SmartFrog deployment programs.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure below, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.
<h3>Performance Cartography</h3>
<b>Approach.</b> In our evaluation, we have created a powerful infrastructure to generate the full set of experimental specifications to measure the performance of standard benchmarks over a wide range of hardware and software configurations. We have decided to use this infrastructure to study experimentally the performance variations of these benchmarks over a range of different configurations. Without our code generation infrastructure, past performance studies have been limited in scope due to practical problems of managing the number of experiments. We have used the Mulini code generator to create a large number of performance measurement experiments, run the experiments and collect/analyze data automatically, and used the analysis to generate Performance Maps.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure above, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.

<b>Research Contributions.</b> Currently, there is no reliable way to predict the performance of complex applications (e.g., N-Tier distributed application such as Rubis and TPC-App) in a complex environment(e.g., data centers). The limitations of analytical methods are due to the strong assumptions needed for solving the analytical models (e.g., based on queuing theory) that are valid only for relatively simple environments. The limitations of experimental measurements are due to the complexity of managing the many configuration combinations in practice. Our work leverages the Elba infrastructure (particularly, the Mulini generator) to generate and manage the experiments, and then use automated analysis techniques and tools to digest the information and create a Performance Map. The Performance Map is a reliable indicator of complex system performance, since it reflects actually measured experiments on the Performance Terrain (modulo tuning and other complications).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2018-04-04 17:50:44</wp:post_date>
		<wp:post_date_gmt>2018-04-04 17:50:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1522864244]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TESTING</title>
		<link>https://gtelbatutorial.wordpress.com/?p=125</link>
		<pubDate>Wed, 04 Apr 2018 17:51:44 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2018-04-04 17:51:44</wp:post_date>
		<wp:post_date_gmt>2018-04-04 17:51:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16462178289]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1522864340]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[testing]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to Elba</title>
		<link>https://gtelbatutorial.wordpress.com/introduction-to-elba__trashed/</link>
		<pubDate>Wed, 04 Apr 2018 17:53:25 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/introduction-to-elba/</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/linear-tutorial/">Tutorial</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Topology</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Parameters</a> <a class="button" href="https://gtelbatutorial.wordpress.com/nsfile/">NSFiles</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/resource-monitors/">Resource Monitors</a> <a class="button" href="https://gtelbatutorial.wordpress.com/cloud-deployment/">Cloud Deployment</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/faqs/">FAQs</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-analysis/">Experiment Analysis</a>

<b>Background.</b> One of the main research challenges in the Adaptive Enterprise vision is the automation of large application system management, encompassing design, deployment, to production use, and capturing application monitoring, evaluation, and evolution. Current approaches to enterprise system evaluation and tuning happen on production systems where the real workload to the deployed system is analyzed on-line and corresponding measurements are taken. In addition, many of these systems go through a detailed staging process that is mostly manual, complex and time-consuming. During the staging process the system to be produced is subjected to workloads to determine whether it will meet the production workloads. Finally, data gleaned from the staging process can be re-used to guide future designs and for management of system during operations.

<b>Project Motivation.</b> We want to verify and test an application system deployment plan in a staging environment before committing it to a production environment. Manual verification of a deployment is cumbersome, time consuming, and error prone. This problem will grow in importance in the deployment of increasingly larger and more sophisticated applications. Therefore, it will be increasingly important to have an automatic method for executing a benchmark on the deployment plan to validate the deployment during staging, instead of debugging a deployment during production use.

<img class=" size-full wp-image-13 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg" alt="ELBA_ARCH" width="585" height="329" />
<h2>Contributions and Approaches</h2>
<h3>Automated Deployment and Staging Infrastructure</h3>
<b>Approach.</b> In our project we intend to automate the staging process thus reducing the time and manual labor involved in the process, increase confidence, and extract predictive performance data. Further, the automation will support a more thorough application test and validation in a larger state space, since we plan to automate the monitoring and analysis steps to speed up the refinement of application deployment. Our tools will translate a high-level specification of performance and availability (e.g., SLA requirements) into executable deployment, test, evaluation, and analysis code for the staging phase. This work builds on our experience and technology previously developed such as evaluation of SmartFrog and translation of Quartermaster design specifications into SmartFrog deployment programs.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure below, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.
<h3>Performance Cartography</h3>
<b>Approach.</b> In our evaluation, we have created a powerful infrastructure to generate the full set of experimental specifications to measure the performance of standard benchmarks over a wide range of hardware and software configurations. We have decided to use this infrastructure to study experimentally the performance variations of these benchmarks over a range of different configurations. Without our code generation infrastructure, past performance studies have been limited in scope due to practical problems of managing the number of experiments. We have used the Mulini code generator to create a large number of performance measurement experiments, run the experiments and collect/analyze data automatically, and used the analysis to generate Performance Maps.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure above, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.

<b>Research Contributions.</b> Currently, there is no reliable way to predict the performance of complex applications (e.g., N-Tier distributed application such as Rubis and TPC-App) in a complex environment(e.g., data centers). The limitations of analytical methods are due to the strong assumptions needed for solving the analytical models (e.g., based on queuing theory) that are valid only for relatively simple environments. The limitations of experimental measurements are due to the complexity of managing the many configuration combinations in practice. Our work leverages the Elba infrastructure (particularly, the Mulini generator) to generate and manage the experiments, and then use automated analysis techniques and tools to digest the information and create a Performance Map. The Performance Map is a reliable indicator of complex system performance, since it reflects actually measured experiments on the Performance Terrain (modulo tuning and other complications).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date>2018-04-04 17:53:25</wp:post_date>
		<wp:post_date_gmt>2018-04-04 17:53:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>introduction-to-elba__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1522864639]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[introduction-to-elba]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>simon-abrams-286276-unsplash</title>
		<link>https://gtelbatutorial.wordpress.com/linear-tutorial/simon-abrams-286276-unsplash/</link>
		<pubDate>Wed, 04 Apr 2018 18:01:52 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/simon-abrams-286276-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2018-04-04 18:01:52</wp:post_date>
		<wp:post_date_gmt>2018-04-04 18:01:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>simon-abrams-286276-unsplash</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>19</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/simon-abrams-286276-unsplash.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/simon-abrams-286276-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:4430;s:6:"height";i:2953;s:4:"file";s:105:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/simon-abrams-286276-unsplash.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:2288024;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to Elba</title>
		<link>https://gtelbatutorial.wordpress.com/introduction-to-elba__trashed-2/</link>
		<pubDate>Wed, 04 Apr 2018 18:07:24 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=134</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/linear-tutorial/">Tutorial</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Topology</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Parameters</a> <a class="button" href="https://gtelbatutorial.wordpress.com/nsfile/">NSFiles</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/resource-monitors/">Resource Monitors</a> <a class="button" href="https://gtelbatutorial.wordpress.com/cloud-deployment/">Cloud Deployment</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/faqs/">FAQs</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-analysis/">Experiment Analysis</a>

<b>Background.</b> One of the main research challenges in the Adaptive Enterprise vision is the automation of large application system management, encompassing design, deployment, to production use, and capturing application monitoring, evaluation, and evolution. Current approaches to enterprise system evaluation and tuning happen on production systems where the real workload to the deployed system is analyzed on-line and corresponding measurements are taken. In addition, many of these systems go through a detailed staging process that is mostly manual, complex and time-consuming. During the staging process the system to be produced is subjected to workloads to determine whether it will meet the production workloads. Finally, data gleaned from the staging process can be re-used to guide future designs and for management of system during operations.

<b>Project Motivation.</b> We want to verify and test an application system deployment plan in a staging environment before committing it to a production environment. Manual verification of a deployment is cumbersome, time consuming, and error prone. This problem will grow in importance in the deployment of increasingly larger and more sophisticated applications. Therefore, it will be increasingly important to have an automatic method for executing a benchmark on the deployment plan to validate the deployment during staging, instead of debugging a deployment during production use.

<img class=" size-full wp-image-13 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg" alt="ELBA_ARCH" width="585" height="329" />
<h2>Contributions and Approaches</h2>
<h3>Automated Deployment and Staging Infrastructure</h3>
<b>Approach.</b> In our project we intend to automate the staging process thus reducing the time and manual labor involved in the process, increase confidence, and extract predictive performance data. Further, the automation will support a more thorough application test and validation in a larger state space, since we plan to automate the monitoring and analysis steps to speed up the refinement of application deployment. Our tools will translate a high-level specification of performance and availability (e.g., SLA requirements) into executable deployment, test, evaluation, and analysis code for the staging phase. This work builds on our experience and technology previously developed such as evaluation of SmartFrog and translation of Quartermaster design specifications into SmartFrog deployment programs.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure below, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.
<h3>Performance Cartography</h3>
<b>Approach.</b> In our evaluation, we have created a powerful infrastructure to generate the full set of experimental specifications to measure the performance of standard benchmarks over a wide range of hardware and software configurations. We have decided to use this infrastructure to study experimentally the performance variations of these benchmarks over a range of different configurations. Without our code generation infrastructure, past performance studies have been limited in scope due to practical problems of managing the number of experiments. We have used the Mulini code generator to create a large number of performance measurement experiments, run the experiments and collect/analyze data automatically, and used the analysis to generate Performance Maps.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure above, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.

<b>Research Contributions.</b> Currently, there is no reliable way to predict the performance of complex applications (e.g., N-Tier distributed application such as Rubis and TPC-App) in a complex environment(e.g., data centers). The limitations of analytical methods are due to the strong assumptions needed for solving the analytical models (e.g., based on queuing theory) that are valid only for relatively simple environments. The limitations of experimental measurements are due to the complexity of managing the many configuration combinations in practice. Our work leverages the Elba infrastructure (particularly, the Mulini generator) to generate and manage the experiments, and then use automated analysis techniques and tools to digest the information and create a Performance Map. The Performance Map is a reliable indicator of complex system performance, since it reflects actually measured experiments on the Performance Terrain (modulo tuning and other complications).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2018-04-04 18:07:24</wp:post_date>
		<wp:post_date_gmt>2018-04-04 18:07:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>introduction-to-elba__trashed-2</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1522865304]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[introduction-to-elba]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test</title>
		<link>https://gtelbatutorial.wordpress.com/?p=144</link>
		<pubDate>Wed, 04 Apr 2018 20:56:28 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[test]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2018-04-04 20:56:28</wp:post_date>
		<wp:post_date_gmt>2018-04-04 20:56:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>test__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16467078907]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1522875390]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1522875437]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[test]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to the Elba Project</title>
		<link>https://gtelbatutorial.wordpress.com/?p=146</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/linear-tutorial/">Tutorial</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Topology</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Parameters</a> <a class="button" href="https://gtelbatutorial.wordpress.com/nsfile/">NSFiles</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/resource-monitors/">Resource Monitors</a> <a class="button" href="https://gtelbatutorial.wordpress.com/cloud-deployment/">Cloud Deployment</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/faqs/">FAQs</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-analysis/">Experiment Analysis</a>
<p style="text-align:left;"><b>Background.</b> One of the main research challenges in the Adaptive Enterprise vision is the automation of large application system management, encompassing design, deployment, to production use, and capturing application monitoring, evaluation, and evolution. Current approaches to enterprise system evaluation and tuning happen on production systems where the real workload to the deployed system is analyzed on-line and corresponding measurements are taken. In addition, many of these systems go through a detailed staging process that is mostly manual, complex and time-consuming. During the staging process the system to be produced is subjected to workloads to determine whether it will meet the production workloads. Finally, data gleaned from the staging process can be re-used to guide future designs and for management of system during operations.</p>
<b>Project Motivation.</b> We want to verify and test an application system deployment plan in a staging environment before committing it to a production environment. Manual verification of a deployment is cumbersome, time consuming, and error prone. This problem will grow in importance in the deployment of increasingly larger and more sophisticated applications. Therefore, it will be increasingly important to have an automatic method for executing a benchmark on the deployment plan to validate the deployment during staging, instead of debugging a deployment during production use.

<img class=" size-full wp-image-13 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg" alt="ELBA_ARCH" width="585" height="329" />
<h2>Contributions and Approaches</h2>
<h3>Automated Deployment and Staging Infrastructure</h3>
<b>Approach.</b> In our project we intend to automate the staging process thus reducing the time and manual labor involved in the process, increase confidence, and extract predictive performance data. Further, the automation will support a more thorough application test and validation in a larger state space, since we plan to automate the monitoring and analysis steps to speed up the refinement of application deployment. Our tools will translate a high-level specification of performance and availability (e.g., SLA requirements) into executable deployment, test, evaluation, and analysis code for the staging phase. This work builds on our experience and technology previously developed such as evaluation of SmartFrog and translation of Quartermaster design specifications into SmartFrog deployment programs.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure below, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.
<h3>Performance Cartography</h3>
<b>Approach.</b> In our evaluation, we have created a powerful infrastructure to generate the full set of experimental specifications to measure the performance of standard benchmarks over a wide range of hardware and software configurations. We have decided to use this infrastructure to study experimentally the performance variations of these benchmarks over a range of different configurations. Without our code generation infrastructure, past performance studies have been limited in scope due to practical problems of managing the number of experiments. We have used the Mulini code generator to create a large number of performance measurement experiments, run the experiments and collect/analyze data automatically, and used the analysis to generate Performance Maps.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure above, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.

<b>Research Contributions.</b> Currently, there is no reliable way to predict the performance of complex applications (e.g., N-Tier distributed application such as Rubis and TPC-App) in a complex environment(e.g., data centers). The limitations of analytical methods are due to the strong assumptions needed for solving the analytical models (e.g., based on queuing theory) that are valid only for relatively simple environments. The limitations of experimental measurements are due to the complexity of managing the many configuration combinations in practice. Our work leverages the Elba infrastructure (particularly, the Mulini generator) to generate and manage the experiments, and then use automated analysis techniques and tools to digest the information and create a Performance Map. The Performance Map is a reliable indicator of complex system performance, since it reflects actually measured experiments on the Performance Terrain (modulo tuning and other complications).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2018-04-04 20:57:26</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Creation</title>
		<link>https://gtelbatutorial.wordpress.com/?p=147</link>
		<pubDate>Wed, 04 Apr 2018 21:04:34 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Customization</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-1</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-2</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-3</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-4</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-5</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-6</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2018-04-04 21:04:34</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:04:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experiment-creation__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1522875876]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16467297489]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1522876121]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[experiment-creation]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Methodology and Data Analysis</title>
		<link>https://gtelbatutorial.wordpress.com/?p=149</link>
		<pubDate>Wed, 04 Apr 2018 21:05:31 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=149</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Analysis Outline</h4>
<ol>
	<li>Explain your approach to data transformation, integration, and management.</li>
	<li>Detail how you use the data gathered to isolate millibottlenecks and diagnose their root cause.</li>
	<li>Describe the steps needed to analyze your experiment:
<ol>
	<li>Copy the tarball archive containing the experiment data to a location proximate to the cloned Elba Github repository.</li>
	<li>Unzip the copied archive.</li>
	<li>Navigate to the parsers directory of the cloned Elba Github repository.</li>
	<li>Execute "runparsers.sh" by providing the following:
<ol>
	<li>Path to the directory containing the unzipped archive</li>
	<li>Target location to store the processing results</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4>milliScope Data Flow and Architecture</h4>
<img class="alignnone size-full wp-image-103" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-05-35-pm.png" alt="Screen Shot 2018-03-28 at 7.05.35 PM" width="868" height="373" />

The data transformation flow of milliScope. The event mScopeMonitors capture
timestamps, as shown in Figure 4, in the component logs, while the resource mScopeMonitors record the system resource utilization. mScopeDataTranformer converts these unstructured data to structured tuples and loads them into a dynamic data warehouse, mScopeDB, for advanced analysis.

mScopeData Transformer Design
<ul>
	<li>Data pipeline transforms highly variable monitoring data into aggregates that are helpful in millibottleneck isolation and root cause analysis​</li>
	<li>These aggregates are:​
<ul>
	<li>Point-in-Time Response Time​</li>
	<li>Queue Length​</li>
	<li>Downstream Service Time​</li>
	<li>Resource Consumption Descriptive Statistics​</li>
</ul>
</li>
</ul>
Other Parsers
<ul>
	<li>Cparsers – extract request-level data out of component logs. <i>These are pictured in addition to Resource parsers</i>​
<ul>
	<li>ServiceTime – reads request-level data and calculates dst​</li>
	<li>Pointintime – reads request-level data (Apache) and calculated pit​</li>
	<li>Multifile – basically joins and aggregates data in uniform entities (dst_table, resource_table); pit is independent​</li>
</ul>
</li>
	<li>How to reconcile not ingesting XML into mScopeDataTransformer?​
<ul>
	<li>Component parsers were supposed to output XML​</li>
	<li>Even if they were, we still need to calculate aggregates like queue lengths and dst​
<ul>
	<li>Prob in database; the issue with this is trying to do the integration and calculation when the schemas change…​</li>
	<li>Or, compute aggregates externally and import​</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4>milliAnalyst</h4>
<ul>
	<li>Uniform data interface consisting of three entities:​
<ul>
	<li>PointinTime ​</li>
	<li>DownstreamServiceTime (DST)​</li>
	<li>ResourceObservations​</li>
</ul>
</li>
	<li>Each of these entities can have a variable number of number of attributes ​</li>
	<li>Experiment specification impacts this, i.e. the number of nodes determines the number of DST attributes​</li>
	<li>Number of attributes can also depend on characteristics that might not be known prior to running an experiment, such as a node’s number of CPUs, cores, NICs or disks​</li>
	<li>Method needs to handle this variable number of attributes, i.e. no fixed schemas​</li>
	<li>Method needs to be able to integrate data across time and space​</li>
	<li>Representation needs to be able to handle data anomalies and support efficient filtering and retrieval of small data subsets across all of the measurements​</li>
	<li>Support graph-based reasoning​</li>
</ul>
milliBottlenecks
<ul>
	<li>Millibottlenecks happen in different system layers​
<ul>
	<li>System software: Java garbage collection​</li>
	<li>Processor architecture: DVFS​</li>
	<li>Application Virtual Machine consolidation​</li>
</ul>
</li>
	<li>Though short-lived, millibottlenecks have big impact<b> </b>on n-tier application performance​
<ul>
	<li>VLRT requests​</li>
	<li>Queue amplification from n-tier system component dependencies​</li>
</ul>
</li>
</ul>
<img class="alignnone size-full wp-image-104" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-07-24-pm.png" alt="Screen Shot 2018-03-28 at 7.07.24 PM" width="818" height="434" />

Above is the work flow of milliBottleneck discovery. Users define the configuration file at first, and the script generator generates scripts which set up the experiment environment and deploy milliScope as well as other softwares. mScopeDataTransformer converts these unstructured data to structured tuples in mScopeDB as described in Figure 3 for advanced analysis.
<h4>Solutions</h4>
<ul>
	<li>Three kinds of solutions for Latency Long Tail Problem​
<ul>
	<li>Bug-fix, specific solutions for each cause (many causes, not all can be fixed)​</li>
	<li>General solutions for transient bottlenecks (primarily improved queue management)​</li>
	<li>Last-resort solution​</li>
</ul>
</li>
	<li>Bug-Fix for Specific Solutions
<ul>
	<li>Some cases can be “fixed”​
<ul>
	<li>Java GC in JVM 1.5 was “fixed” in JVM 1.6​</li>
	<li>DVFS anti-synchrony can be “fixed” by changing control periods (some complications)​</li>
</ul>
</li>
	<li>Other cases are harder to fix​
<ul>
	<li>VM consolidation case (noisy neighbor) is really non-deterministic​</li>
</ul>
</li>
	<li>Kernel daemon processes (many)​</li>
</ul>
</li>
	<li>General Solutions
<ul>
	<li>Approaches that address transient bottlenecks (instead of specific “bugs”)​
<ul>
	<li>3 stages: (1) transient bottleneck formation, (2) queue amplification, (3) packet retransmission​</li>
</ul>
</li>
	<li>(1) Transient bottleneck detection and remedial action (e.g., disruption)​
<ul>
	<li>Difficult, due to the short lifespan of transient bottlenecks​</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date>2018-04-04 21:05:31</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:05:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experiment-analysis__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16467321123]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1522875933]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523302996]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[experiment-analysis]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Generation</title>
		<link>https://gtelbatutorial.wordpress.com/?p=151</link>
		<pubDate>Wed, 04 Apr 2018 21:07:17 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=151</guid>
		<description></description>
		<content:encoded><![CDATA[Experimental artifacts like the scripts and software configuration are created dynamically by the code generation pipeline. This pipeline can be executed using the following commands, substituting the values for and as provided in Step 2:
<ul>
	<li><code>ssh node1.</code></li>
	<li><code>cd /proj/Infosphere//common/rubbosMulini6
</code></li>
</ul>
Finally, open <em>runRubbosExperiment.sh</em> and substituting with the specified values
<ul>
	<li><code>BUILD_DIR = /proj/Infosphere/</code></li>
	<li><code> OUTPUT_HOME =  from Step2
</code></li>
</ul>
The script can now be run with the following command where corresponds to the name of the Experiment XML file from Step 2:
<ul>
	<li><code>./runRubbosExperiment.sh </code></li>
</ul>
In the case of our running example, this should be:
<ul>
	<li><code>./runRubbosExperiment.sh RUBBOS-1111-EMULAB-.xml
</code></li>
</ul>
<em>Important Notes</em>:
<ul>
	<li>Activating the experiment on <em>emulab</em>, ("swapping it in") and logging into node1 is not a <em>strict</em> dependency. Since the image and <em>emulab</em> environment already have the proper environment variables set, this step ensures consistency during experiment generation.</li>
	<li>The script should be run from a location that has the environment variable, JAVA_HOME, set. Nodes using the FC15RubOral image already have JAVA_HOME set. So, we recommend connecting to the Control node with <strong>ssh</strong> to execute this step.</li>
	<li>[jk] Double check whether this can run with a different JAVA version or if it needs to be Java 1.4</li>
	<li>Sample Experiment XML files are available in the <code>/examples</code> directory in our <a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git">Github repository.</a></li>
</ul>
<h4>Code Generator Description</h4>
In general, our code generator is orchestrated by way of the <code>runRubbosExperiment.sh</code> script. This script calls a Java program, DeployScriptGenerator, which generates all of the necessary scripts and artifacts for executing an experiment in one of the supported infrastructures. The following describes the script more generally and the organization of the code generator source code:
<ol>
	<li>Code Generator Organization:
<ul>
	<li>Base directory, <code>../common/rubbosMulini6</code>, contains the aforementioned script. It also acts as a reference point for executing the code generator and pipeline.</li>
	<li>Two sub-directories house the code generator source and base artifacts:
<ul>
	<li><code>../rubbosMulini6/templates</code> - contains the XSL-based code templates that serve as a basis for the experiment scripts</li>
	<li><code>../rubbosMulini6/source</code> - contains the Java source code for the code generator</li>
</ul>
</li>
</ul>
</li>
	<li>Parameter Descriptions. The <code>runRubbosExperiment.sh</code> script uses the following parameters in addition to those mentioned at the beginning of this Step. These might need to be altered depending on the environment used for generating experiments:
<ul>
	<li>MULINI_DIR: specifies the base directory of the code generator, i.e. <code>../rubbosMulini6</code>from above</li>
	<li>EXP_DIR: specifies the path to Experiment XML files, i.e. the location for the filename specified as a command line parameter</li>
</ul>
</li>
	<li><em>Dependencies</em>:
<ul>
	<li>Directories, <code>/templates</code> and <code>/source</code> need to be located in the same directory as the aforementioned script. Currently, all of these appear under <code>/common</code> in the source code repository under <code>/code_generator/</code></li>
	<li>Value of <code>OUTPUT_HOME</code> parameter used in this script needs to be the same as the value of the <code>OUTPUT_HOME</code> parameter specified in the referenced Experiment XML file</li>
</ul>
</li>
</ol>
<h4><a id="user-content-step-4-executing-the-experiment-on-emulab-cluster" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-4-executing-the-experiment-on-emulab-cluster"></a>Step 4: Executing the Experiment on Emulab cluster</h4>
Continuing with our example, perform the following preliminaries by substituting the values for parameters, and , as provided in Step 2:
<ul>
	<li><code>ssh node1. </code></li>
	<li><code>
cd /scripts
</code></li>
</ul>
Finally, the experiment can be run by executing the ‘run.sh’ script with the following command:
<ul>
	<li><code>./run.sh
</code></li>
</ul>
While executing an experiment in this manner works, there a few downsides to executing an experiment this way. These limitations are:
<ul>
	<li>Error messages or standard output will not be captured for future analysis. This makes the verification that the experiment ran "correctly" rather difficult as debugging would require examining terminal-based output.</li>
	<li>Secondly, since this command is executed over an SSH session, it could timeout if the experiment execution time exceeds the default session timeout, causing an abrupt termination of the experiment prior to its natural completion. These problems are resolved by using the following, alternative method.</li>
</ul>
Running experiments under a <code>screen</code> session mitigates these problems. [Ensure the Linux program <em>screen</em> is installed prior to executing an experiment with this method.] The Linux program, <em>screen</em>, enables scripts to be executed independent of an active <strong>ssh</strong> session. To run an experiment under <em>screen</em>, use the following:
<ul>
	<li><code>./run_screen.sh
</code></li>
</ul>
This script creates a new session, navigates to the experiment at the provided path, runs the experiment while storing the output, and detaches the screen from your current shell. The script also saves all output to a log file in the specified directory.

To re-attach to the screen session, a user can run the following command and replacing with the <em>Experiment Name</em> value from Step 1:
<ul>
	<li><code>screen –r
</code></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date>2018-04-04 21:07:17</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:07:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experiment-generation__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1522876039]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16467368947]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523303083]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[experiment-generation]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Creation</title>
		<link>https://gtelbatutorial.wordpress.com/?p=153</link>
		<pubDate>Wed, 04 Apr 2018 21:08:15 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/04/experiment-creation-2/</guid>
		<description></description>
		<content:encoded><![CDATA[To increase the efficiency and speed of cloud-based systems research, we rely on code generation techniques to create experiments. Before generating artifacts such as installation scripts and configuration, a "reservation" needs to be created on one of the supported public clouds. In addition, the experiment configuration needs to be supplied to the generator. The following two steps accomplish these tasks while the final step outputs the necessary experimental artifacts for running the desired experiment on the public cloud.

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Customization</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-1</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-2</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-3</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-4</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-5</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-6</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2018-04-04 21:08:15</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:08:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experiment-creation-2__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1522876098]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16467394444]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523303098]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[experiment-creation-2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to the Elba Project</title>
		<link>https://gtelbatutorial.wordpress.com/?p=154</link>
		<pubDate>Wed, 04 Apr 2018 21:08:27 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/04/introduction-to-the-elba-project/</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/linear-tutorial/">Tutorial</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Topology</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Parameters</a> <a class="button" href="https://gtelbatutorial.wordpress.com/nsfile/">NSFiles</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/resource-monitors/">Resource Monitors</a> <a class="button" href="https://gtelbatutorial.wordpress.com/cloud-deployment/">Cloud Deployment</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/faqs/">FAQs</a> <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-analysis/">Experiment Analysis</a>
<p style="text-align:left;"><b>Background.</b> One of the main research challenges in the Adaptive Enterprise vision is the automation of large application system management, encompassing design, deployment, to production use, and capturing application monitoring, evaluation, and evolution. Current approaches to enterprise system evaluation and tuning happen on production systems where the real workload to the deployed system is analyzed on-line and corresponding measurements are taken. In addition, many of these systems go through a detailed staging process that is mostly manual, complex and time-consuming. During the staging process the system to be produced is subjected to workloads to determine whether it will meet the production workloads. Finally, data gleaned from the staging process can be re-used to guide future designs and for management of system during operations.</p>
<b>Project Motivation.</b> We want to verify and test an application system deployment plan in a staging environment before committing it to a production environment. Manual verification of a deployment is cumbersome, time consuming, and error prone. This problem will grow in importance in the deployment of increasingly larger and more sophisticated applications. Therefore, it will be increasingly important to have an automatic method for executing a benchmark on the deployment plan to validate the deployment during staging, instead of debugging a deployment during production use.

<img class=" size-full wp-image-13 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg" alt="ELBA_ARCH" width="585" height="329" />
<h2>Contributions and Approaches</h2>
<h3>Automated Deployment and Staging Infrastructure</h3>
<b>Approach.</b> In our project we intend to automate the staging process thus reducing the time and manual labor involved in the process, increase confidence, and extract predictive performance data. Further, the automation will support a more thorough application test and validation in a larger state space, since we plan to automate the monitoring and analysis steps to speed up the refinement of application deployment. Our tools will translate a high-level specification of performance and availability (e.g., SLA requirements) into executable deployment, test, evaluation, and analysis code for the staging phase. This work builds on our experience and technology previously developed such as evaluation of SmartFrog and translation of Quartermaster design specifications into SmartFrog deployment programs.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure below, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.
<h3>Performance Cartography</h3>
<b>Approach.</b> In our evaluation, we have created a powerful infrastructure to generate the full set of experimental specifications to measure the performance of standard benchmarks over a wide range of hardware and software configurations. We have decided to use this infrastructure to study experimentally the performance variations of these benchmarks over a range of different configurations. Without our code generation infrastructure, past performance studies have been limited in scope due to practical problems of managing the number of experiments. We have used the Mulini code generator to create a large number of performance measurement experiments, run the experiments and collect/analyze data automatically, and used the analysis to generate Performance Maps.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure above, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.

<b>Research Contributions.</b> Currently, there is no reliable way to predict the performance of complex applications (e.g., N-Tier distributed application such as Rubis and TPC-App) in a complex environment(e.g., data centers). The limitations of analytical methods are due to the strong assumptions needed for solving the analytical models (e.g., based on queuing theory) that are valid only for relatively simple environments. The limitations of experimental measurements are due to the complexity of managing the many configuration combinations in practice. Our work leverages the Elba infrastructure (particularly, the Mulini generator) to generate and manage the experiments, and then use automated analysis techniques and tools to digest the information and create a Performance Map. The Performance Map is a reliable indicator of complex system performance, since it reflects actually measured experiments on the Performance Terrain (modulo tuning and other complications).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2018-04-04 21:08:27</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:08:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduction-to-the-elba-project__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16467400273]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1522876110]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1522876245]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[introduction-to-the-elba-project]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tutorial</title>
		<link>https://gtelbatutorial.wordpress.com/?p=157</link>
		<pubDate>Wed, 04 Apr 2018 21:10:21 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[<ol>
	<li> Create account on the Emulab cloud infrastructure at <a href="http://www.emulab.net/index.php3"><i>emulab.net</i></a> and wait for approval<img class="alignnone size-full wp-image-43" src="https://gtelbatutorial.files.wordpress.com/2018/03/emulabelba.png" alt="EmulabElba" width="1776" height="1125" /></li>
	<li>Once approved for an account fill out your information- make note of the following two points:
<ol>
	<li>When filling out information for your account ensure that you put “Infosphere” for both the group AND the project</li>
	<li>Select <b>bash </b>under the shell portion
<ol>
	<li>Please note: if you forget, this can be set after logging into Emulab and clicking the “Edit Profile” link</li>
</ol>
</li>
</ol>
</li>
	<li>Create a public RSA (SSH) key on your local ‘nix machine under a <b>bash</b> shell.</li>
</ol>
<a class="button" href="https://gtelbatutorial.wordpress.com/2018/02/22/ssh">SSH Generation</a>

4. Add the SSH key to your account by selecting “My Account” and then “Edit SSH keys” on the left hand side of the page.  This is where you would paste your SSH key from the prior step.

5. Email Josh Kimball with your GitHub username to gain access into the GitHub repository
<ol>
	<li>Josh Kimball email address: <a href="mailto:Elba@cc.gatech.edu">Elba@cc.gatech.edu</a></li>
	<li>If you are unfamiliar with GitHub, please create an account at GitHub.com</li>
</ol>
6. Using your computer terminal, create a directory on Emulab’s file share, users.emulab.net, by executing the following commands:
<ol>
	<li style="list-style-type:none;">
<ol>
	<li>Please note: substitute for your Emulab account username
<ol>
	<li>Example: <a href="mailto:JaneDoe@users.emulab.net">JaneDoe@users.emulab.net</a></li>
</ol>
</li>
	<li>ssh JaneDoe@users.emulab.net
cd /proj/Infosphere
mkdir JaneDoe<img class="alignnone size-full wp-image-45" src="https://gtelbatutorial.files.wordpress.com/2018/03/screenshot2lineartutorial.png" alt="Screenshot2LinearTutorial" width="1038" height="736" /></li>
</ol>
</li>
</ol>
7. Use the following webpage to clone the ‘Alpha release of Project NewElba’ into your directory: <a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git">https://github.com/coc-gatech-newelba/NewElbaAlpha.git</a>

<i>NOTE: if you do not gain permission from Josh Kimball, you will not be able to access this page.</i>
<ol>
	<li>In your terminal, enter the directory where you would like to copy the repository
<ol>
	<li>cd ~/</li>
</ol>
</li>
	<li>Clone the repository by executing the following code
<ol>
	<li>git clone <a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git">https://github.com/coc-gatech-newelba/NewElbaAlpha.git</a>
<ol>
	<li>After executing this command, you will be asked to provide your GitHub username and password, so please have this information on hand when going through this step</li>
	<li>(insert March 1.1 screenshot)</li>
</ol>
</li>
</ol>
</li>
	<li>Navigate into the directory of the repository you just created and replace with the repository’s name (NewElbaAlpha)
<ol>
	<li>cd NewElbaAlpha</li>
</ol>
</li>
	<li>Type:
<ol>
	<li>git status</li>
	<li>You should see this:<img class="alignnone size-full wp-image-47" src="https://gtelbatutorial.files.wordpress.com/2018/03/screenshot3lineartutorial.png" alt="Screenshot3LinearTutorial" width="1033" height="226" /></li>
</ol>
</li>
</ol>
<ol>
	<li>Next, execute the following commands:
<ol>
	<li>cd /proj/Infosphere/</li>
	<li>cp -r ./NewElbaAlpha/generator/common /proj/Infosphere/</li>
	<li>mkdir -p /proj/Infosphere//rubbos/rubbos_yasu</li>
	<li>tar -zxvf ./NewElbaAlpha/generator/shared_files.tar.gz --directory=/proj/Infosphere//rubbos/rubbos_yasu</li>
	<li>mkdir -p /proj/Infosphere//softwares/data</li>
	<li>cp -r ./NewElbaAlpha/mScopeEventMonitors /proj/Infosphere//softwares</li>
	<li>cp -r ./NewElbaAlpha/mScopeResourceMonitors /proj/Infosphere//softwares</li>
	<li>cp /proj/Infosphere/shared_software/rubbos_orig_data.tar.gz /proj/Infosphere//softwares/data</li>
	<li>Your terminal should look like the following:</li>
</ol>
</li>
</ol>
<img class="alignnone size-full wp-image-50" src="https://gtelbatutorial.files.wordpress.com/2018/03/screenshot4tutorial.png" alt="Screenshot4Tutorial" width="1798" height="851" />
<h4><img class="alignnone size-full wp-image-49" src="https://gtelbatutorial.files.wordpress.com/2018/03/screenshot5tutorial.png" alt="Screenshot5Tutorial" width="1892" height="826" /></h4>
<h4><a href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Description</a></h4>
Follow this <a href="https://gtelbatutorial.wordpress.com/experiment-customization/">link</a> if you want to execute an experiment other than the topology 1-1-1-1.

The example experiment uses an n-tier application benchmark, RUBBoS. RUBBoS is modeled after a commercial web-based bulletin board system, SlashDot. The benchmark natively supports Read-only and Read-Write workloads, and it enables users to specify the workload in terms of the number of concurrent client requests. For this tutorial, we will use workloads ranging from 1000 to 7000. This example experiment features a system topology composed of:
<ul>
	<li>1 Apache HTTP server</li>
	<li>1 Tomcat Application server</li>
	<li>1 CJDBC Middleware server</li>
	<li>1 MySQL DB server</li>
</ul>
Note: we generally refer to this as a <a href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-1 topology</a> where each number corresponds to the number of deployed Web, Application, Middleware and Database servers in that order.

[googleapps domain="drive" dir="file/d/0ByvytIe8I-qpbDhDV1ZPU0RjcVU/preview" query="" width="640" height="480" /]

<em>Note: The video above takes you through executing an experiment. However, the most up to date information is listed below so put precedence on the below instructions and use the video as support.</em>
<h4><a id="user-content-experiment-creation" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#experiment-creation"></a>Experiment Creation</h4>
To increase the efficiency and speed of cloud-based systems research, we rely on code generation techniques to create experiments. Before generating artifacts such as installation scripts and configuration, a "reservation" needs to be created on one of the supported public clouds. In addition, the experiment configuration needs to be supplied to the generator. The following two steps accomplish these tasks while the final step outputs the necessary experimental artifacts for running the desired experiment on the public cloud.
<h4><a id="user-content-step-1-create-experiment-on-emulab-cluster" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-1-create-experiment-on-emulab-cluster"></a>Step 1: Create experiment on Emulab cluster</h4>
<ol>
	<li>Create a new experiment on Emulab by selecting the <i>Experimentation</i> drop down at the top of the website and select <i>Begin an Experiment</i></li>
	<li>Fill out the the form accordingly.
<ul>
	<li>Make note of the <em><strong>Experiment Name</strong></em> you provide; this value will be needed later to generate the experiment's artifacts</li>
	<li><em>Naming Convention</em> for <em><strong>Experiment Name</strong></em> : use lowercase letters and/or numbers in the name, no spaces or special characters, including underscore ("_")</li>
</ul>
</li>
	<li>This form also asks you to provide an <em>.NSFile</em><a class="button" href="https://gtelbatutorial.wordpress.com/nsfile">.NSFile Generation</a>
<ul>
	<li>This input file specifies the network topology, machine types and OS images for the experiment</li>
	<li>Note: a sample .NSfile can be found <a href="https://gtelbatutorial.wordpress.com/nsfile/">here</a>.
<ul>
	<li>To execute the 1-1-1-1 topology you can copy and paste the code given <a href="https://gtelbatutorial.wordpress.com/nsfile/">here</a> into a text editor. <em>Note: if you are using a Mac then use Sublime, Vim, or TextWrangler- do NOT use TextEditor. </em></li>
</ul>
</li>
</ul>
</li>
	<li>For this example, the <em>.NSFile</em> needs to include 10 nodes, corresponding to: 1 Control node, 1 Benchmark node, 4 Client node, 1 HTTPD node, 1 Tomcat node, 1 C-JDBC node, and 1 MySQL node.</li>
</ol>
Comment: In this example, all of the nodes are on one local area network (LAN). This can be changed by including more LAN's in the specification and connecting the desired nodes to a particular LAN.
<h4><a id="user-content-step-2-describing-the-experiment-by-editingcompleting-experiment-xml" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-2-describing-the-experiment-by-editingcompleting-experiment-xml"></a>Step 2: Describing the Experiment by editing/completing Experiment XML</h4>
<a class="button" href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Parameters</a>

We use an XML file as a basis for generating all experiment artifacts. This XML file contains various environmental and experimental parameters, for example:
<ol>
	<li>username and groupname for executing the experiment</li>
	<li>workload, i.e. number of concurrent user requests</li>
	<li>number of nodes (servers) and the component software (application software) to install on each</li>
	<li>monitoring to activate</li>
</ol>
In short, these parameters control the software, topology, workload and monitors used during the execution of a system experiment. As such, it functions as a de facto experiment specification.

To begin, perform the following commands:
<pre><code>cd /proj/Infosphere//common/experiment_xml  
cp RUBBOS-1111-EMULAB-DEFAULT.xml RUBBOS-1111-EMULAB-.xml  
</code></pre>
Several default parameters need to be changed to execute our example:
<ul>
	<li><em>EMULAB_EXPERIMENT_NAME</em>
Complete this value using the <strong><em>Experiment Name</em></strong> value from above (step 1) using the following format: <em>Experiment Name.infosphere.emulab.net</em>
<ul>
	<li>For example, if the supplied value for Experiment Name during Step 1 was jkimball1112, then the value for this parameter would be: jkimball1112.infosphere.emulab.net</li>
</ul>
</li>
	<li>Output Directories
<ul>
	<li>The following group of parameters direct where the experiment's scripts and output are copied.</li>
	<li>Complete these by providing the <em>Experiment Name</em> value from Step 1 and your Emulab account <em>username</em></li>
</ul>
</li>
</ul>
<pre><code> /rubbos/rubbos_yasu"/&gt;/rubbos/ rubbos_yasu/"/&gt;@users.emulab.net"/&gt;/results"/&gt;  </code></pre>
<ul>
	<li><em>Username: </em>Complete using your Emulab account username</li>
</ul>
<code>  "/&gt;  </code>
<ul>
	<li>Monitors: Set the following monitor parameters to <em>false</em></li>
</ul>
<pre><code>  
  
  
  </code></pre>
<ul>
	<li>Workloads
<ul>
	<li>This example experiment uses workloads ranging from 1000 to 7000 concurrent requests.</li>
</ul>
<ul>
	<li>Lines like the one below can be modified by either changing the corresponding value or commenting out the line entirely</li>
</ul>
</li>
</ul>
<em>Important Notes</em>
<ul>
	<li>mysqlReponseTime parameter should remain "false." The screencast accompanying these instructions sets this parameter incorrectly.</li>
	<li>This file contains many additional parameters. A more complete description for most of them can be found at the end of the tutorial in the <a href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Configuration Parameters</a>.</li>
</ul>
<h4><a id="user-content-step-3-generate-experiment-scripts-and-configuration-using-experiment-xml" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-3-generate-experiment-scripts-and-configuration-using-experiment-xml"></a>Step 3: Generate Experiment Scripts and Configuration using Experiment XML</h4>
Experimental artifacts like the scripts and software configuration are created dynamically by the code generation pipeline. This pipeline can be executed using the following commands, substituting the values for and as provided in Step 2:
<ul>
	<li><code>ssh node1.</code></li>
	<li><code>cd /proj/Infosphere//common/rubbosMulini6
</code></li>
</ul>
Finally, open <em>runRubbosExperiment.sh</em> and substituting with the specified values
<ul>
	<li><code>BUILD_DIR = /proj/Infosphere/</code></li>
	<li><code> OUTPUT_HOME =  from Step2
</code></li>
</ul>
The script can now be run with the following command where corresponds to the name of the Experiment XML file from Step 2:
<ul>
	<li><code>./runRubbosExperiment.sh </code></li>
</ul>
In the case of our running example, this should be:
<ul>
	<li><code>./runRubbosExperiment.sh RUBBOS-1111-EMULAB-.xml
</code></li>
</ul>
<em>Important Notes</em>:
<ul>
	<li>Activating the experiment on <em>emulab</em>, ("swapping it in") and logging into node1 is not a <em>strict</em> dependency. Since the image and <em>emulab</em> environment already have the proper environment variables set, this step ensures consistency during experiment generation.</li>
	<li>The script should be run from a location that has the environment variable, JAVA_HOME, set. Nodes using the FC15RubOral image already have JAVA_HOME set. So, we recommend connecting to the Control node with <strong>ssh</strong> to execute this step.</li>
	<li>[jk] Double check whether this can run with a different JAVA version or if it needs to be Java 1.4</li>
	<li>Sample Experiment XML files are available in the <code>/examples</code> directory in our <a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git">Github repository.</a></li>
</ul>
<h4>Code Generator Description</h4>
In general, our code generator is orchestrated by way of the <code>runRubbosExperiment.sh</code> script. This script calls a Java program, DeployScriptGenerator, which generates all of the necessary scripts and artifacts for executing an experiment in one of the supported infrastructures. The following describes the script more generally and the organization of the code generator source code:
<ol>
	<li>Code Generator Organization:
<ul>
	<li>Base directory, <code>../common/rubbosMulini6</code>, contains the aforementioned script. It also acts as a reference point for executing the code generator and pipeline.</li>
	<li>Two sub-directories house the code generator source and base artifacts:
<ul>
	<li><code>../rubbosMulini6/templates</code> - contains the XSL-based code templates that serve as a basis for the experiment scripts</li>
	<li><code>../rubbosMulini6/source</code> - contains the Java source code for the code generator</li>
</ul>
</li>
</ul>
</li>
	<li>Parameter Descriptions. The <code>runRubbosExperiment.sh</code> script uses the following parameters in addition to those mentioned at the beginning of this Step. These might need to be altered depending on the environment used for generating experiments:
<ul>
	<li>MULINI_DIR: specifies the base directory of the code generator, i.e. <code>../rubbosMulini6</code>from above</li>
	<li>EXP_DIR: specifies the path to Experiment XML files, i.e. the location for the filename specified as a command line parameter</li>
</ul>
</li>
	<li><em>Dependencies</em>:
<ul>
	<li>Directories, <code>/templates</code> and <code>/source</code> need to be located in the same directory as the aforementioned script. Currently, all of these appear under <code>/common</code> in the source code repository under <code>/code_generator/</code></li>
	<li>Value of <code>OUTPUT_HOME</code> parameter used in this script needs to be the same as the value of the <code>OUTPUT_HOME</code> parameter specified in the referenced Experiment XML file</li>
</ul>
</li>
</ol>
<h4><a id="user-content-step-4-executing-the-experiment-on-emulab-cluster" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-4-executing-the-experiment-on-emulab-cluster"></a>Step 4: Executing the Experiment on Emulab cluster</h4>
Continuing with our example, perform the following preliminaries by substituting the values for parameters, and , as provided in Step 2:
<ul>
	<li><code>ssh node1. </code></li>
	<li><code>
cd /scripts
</code></li>
</ul>
Finally, the experiment can be run by executing the ‘run.sh’ script with the following command:
<ul>
	<li><code>./run.sh
</code></li>
</ul>
While executing an experiment in this manner works, there a few downsides to executing an experiment this way. These limitations are:
<ul>
	<li>Error messages or standard output will not be captured for future analysis. This makes the verification that the experiment ran "correctly" rather difficult as debugging would require examining terminal-based output.</li>
	<li>Secondly, since this command is executed over an SSH session, it could timeout if the experiment execution time exceeds the default session timeout, causing an abrupt termination of the experiment prior to its natural completion. These problems are resolved by using the following, alternative method.</li>
</ul>
Running experiments under a <code>screen</code> session mitigates these problems. [Ensure the Linux program <em>screen</em> is installed prior to executing an experiment with this method.] The Linux program, <em>screen</em>, enables scripts to be executed independent of an active <strong>ssh</strong> session. To run an experiment under <em>screen</em>, use the following:
<ul>
	<li><code>./run_screen.sh
</code></li>
</ul>
This script creates a new session, navigates to the experiment at the provided path, runs the experiment while storing the output, and detaches the screen from your current shell. The script also saves all output to a log file in the specified directory.

To re-attach to the screen session, a user can run the following command and replacing with the <em>Experiment Name</em> value from Step 1:
<ul>
	<li><code>screen –r
</code></li>
</ul>
<h4><a id="user-content-experiment-organization" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#experiment-organization"></a>Experiment Organization</h4>
In general, every generated experiment adheres to a canonical structure.
<pre><code>/proj/infosphere//rubbos/rubbos_yasu/  
</code></pre>
<ul>
	<li style="list-style-type:none;">
<ul>
	<li>is the top-level directory that holds all of the generated experiment artifacts. In fact, this line corresponds to the value supplied for the <em>OUTPUT_HOME</em> parameter in the Experiment XML</li>
	<li>This acts as a de facto reference point for many other scripts during the installation and configuration of the environment's nodes and benchmark</li>
	<li>It must be accessible to the environment where the experiment will be run, so the associated scripts and configuration can be executed</li>
	<li><em>Shared Structures.</em> There are several <em>shared directories</em>, i.e. all experiments reference these directories and must exist under <code>../rubbos_yasu</code>, i.e. in the context of OUTPUT_HOME, these structures must be at the same level in the path as the . These directories are:
<ul>
	<li>emulab_files: file system configuration for <code>fdisk</code></li>
	<li>tomcat_files: standard startup and shutdown scripts</li>
	<li>apache_files: static html files for the benchmark</li>
	<li>rubbos_files: benchmark source code for the Client generator and Application logic (Servlets)</li>
	<li><em>Note: There can be others such as postgres_files and a directory for marmot; however, these are only necessary for running experiments with postgres DBMS and the PRObE cloud respectively.</em></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><a href="https://gtelbatutorial.wordpress.com/faqs/">FAQ and Best Practices</a></h4>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2018-04-04 21:10:21</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:10:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tutorial__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16467448619]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1522876224]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523303117]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[tutorial]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to the Elba Project</title>
		<link>https://gtelbatutorial.wordpress.com/?p=159</link>
		<pubDate>Wed, 04 Apr 2018 21:10:37 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/04/introduction-to-the-elba-project-2/</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/linear-tutorial/">Tutorial</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/faqs/">FAQs</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/resource-monitors/">Resource Monitors</a> <a class="button" href="https://gtelbatutorial.wordpress.com/cloud-deployment/">Cloud Deployment</a>
<p style="text-align:left;"><b>Background.</b> One of the main research challenges in the Adaptive Enterprise vision is the automation of large application system management, encompassing design, deployment, to production use, and capturing application monitoring, evaluation, and evolution. Current approaches to enterprise system evaluation and tuning happen on production systems where the real workload to the deployed system is analyzed on-line and corresponding measurements are taken. In addition, many of these systems go through a detailed staging process that is mostly manual, complex and time-consuming. During the staging process the system to be produced is subjected to workloads to determine whether it will meet the production workloads. Finally, data gleaned from the staging process can be re-used to guide future designs and for management of system during operations.</p>
<b>Project Motivation.</b> We want to verify and test an application system deployment plan in a staging environment before committing it to a production environment. Manual verification of a deployment is cumbersome, time consuming, and error prone. This problem will grow in importance in the deployment of increasingly larger and more sophisticated applications. Therefore, it will be increasingly important to have an automatic method for executing a benchmark on the deployment plan to validate the deployment during staging, instead of debugging a deployment during production use.

<img class=" size-full wp-image-13 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg" alt="ELBA_ARCH" width="585" height="329" />
<h2>Contributions and Approaches</h2>
<h3>Automated Deployment and Staging Infrastructure</h3>
<b>Approach.</b> In our project we intend to automate the staging process thus reducing the time and manual labor involved in the process, increase confidence, and extract predictive performance data. Further, the automation will support a more thorough application test and validation in a larger state space, since we plan to automate the monitoring and analysis steps to speed up the refinement of application deployment. Our tools will translate a high-level specification of performance and availability (e.g., SLA requirements) into executable deployment, test, evaluation, and analysis code for the staging phase. This work builds on our experience and technology previously developed such as evaluation of SmartFrog and translation of Quartermaster design specifications into SmartFrog deployment programs.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure below, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.
<h3>Performance Cartography</h3>
<b>Approach.</b> In our evaluation, we have created a powerful infrastructure to generate the full set of experimental specifications to measure the performance of standard benchmarks over a wide range of hardware and software configurations. We have decided to use this infrastructure to study experimentally the performance variations of these benchmarks over a range of different configurations. Without our code generation infrastructure, past performance studies have been limited in scope due to practical problems of managing the number of experiments. We have used the Mulini code generator to create a large number of performance measurement experiments, run the experiments and collect/analyze data automatically, and used the analysis to generate Performance Maps.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure above, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.

<b>Research Contributions.</b> Currently, there is no reliable way to predict the performance of complex applications (e.g., N-Tier distributed application such as Rubis and TPC-App) in a complex environment(e.g., data centers). The limitations of analytical methods are due to the strong assumptions needed for solving the analytical models (e.g., based on queuing theory) that are valid only for relatively simple environments. The limitations of experimental measurements are due to the complexity of managing the many configuration combinations in practice. Our work leverages the Elba infrastructure (particularly, the Mulini generator) to generate and manage the experiments, and then use automated analysis techniques and tools to digest the information and create a Performance Map. The Performance Map is a reliable indicator of complex system performance, since it reflects actually measured experiments on the Performance Terrain (modulo tuning and other complications).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2018-04-04 21:10:37</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:10:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduction-to-the-elba-project-2__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16467455107]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1522876240]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523303149]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[introduction-to-the-elba-project-2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nasa-53884-unsplash</title>
		<link>https://gtelbatutorial.wordpress.com/nasa-53884-unsplash/</link>
		<pubDate>Wed, 04 Apr 2018 21:24:05 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/nasa-53884-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date>2018-04-04 21:24:05</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:24:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>nasa-53884-unsplash</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/nasa-53884-unsplash.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/nasa-53884-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:4256;s:6:"height";i:2832;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/nasa-53884-unsplash.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:985491;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-nasa-53884-unsplash.jpg</title>
		<link>https://gtelbatutorial.wordpress.com/cropped-nasa-53884-unsplash-jpg/</link>
		<pubDate>Wed, 04 Apr 2018 21:24:22 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.files.wordpress.com/2018/04/cropped-nasa-53884-unsplash.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2018-04-04 21:24:22</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:24:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-nasa-53884-unsplash-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/cropped-nasa-53884-unsplash.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/cropped-nasa-53884-unsplash.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";i:1400;s:6:"height";i:573;s:4:"file";s:104:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/cropped-nasa-53884-unsplash.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:104948;s:17:"attachment_parent";i:169;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/pique</wp:meta_key>
			<wp:meta_value><![CDATA[1522877095]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/pique]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-visit-tech.png</title>
		<link>https://gtelbatutorial.wordpress.com/cropped-visit-tech-png/</link>
		<pubDate>Wed, 04 Apr 2018 21:26:04 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.files.wordpress.com/2018/02/cropped-visit-tech.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2018-04-04 21:26:04</wp:post_date>
		<wp:post_date_gmt>2018-04-04 21:26:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-visit-tech-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/02/cropped-visit-tech.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/cropped-visit-tech.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:5:"width";i:1400;s:6:"height";i:606;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/02/cropped-visit-tech.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1405992;s:17:"attachment_parent";i:16;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/pique</wp:meta_key>
			<wp:meta_value><![CDATA[1522877293]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/pique]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tools</title>
		<link>https://gtelbatutorial.wordpress.com/?p=181</link>
		<pubDate>Mon, 09 Apr 2018 19:40:05 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2018-04-09 19:40:05</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:40:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tools__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629004887]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523303060]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[tools]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Processing and Management</title>
		<link>https://gtelbatutorial.wordpress.com/?p=183</link>
		<pubDate>Mon, 09 Apr 2018 19:41:24 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2018-04-09 19:41:24</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:41:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>data-processing-and-management__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629039275]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523303018]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[data-processing-and-management]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Publications</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/publications/</link>
		<pubDate>Mon, 09 Apr 2018 19:42:03 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>2017</h2>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Qingyang Wang, Chien-An Lai, Yasuhiko Kanemasa, Shungeng Zhang, and Calton Pu </span></strong>“A Study of Long-Tail Latency in n-Tier Systems: RPC vs. Asynchronous Invocations”, In <em>37th International Conference on Distributed Computing Systems (ICDCS'17), Atlanta, GA, June 2017. (Acceptance rate: 90/531=16.9%)</em></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Chien-An Lai, Joshua Kimball, Tao Zhu, Qingyang Wang, and Calton Pu</span></strong>“milliScope: a Fine-Grained Monitoring Framework for Performance Debugging of n-Tier Web Services", In <em>37th International Conference on Distributed Computing Systems (ICDCS'17), Atlanta, GA, June 2017. (Acceptance rate: 90/531=16.9%)</em></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Tao Zhu, Jack Li, Josh Kimball, Junhee Park, Chien-An Lai, Calton Pu and Qingyang Wang </span></strong>"Limitations of Load Balancing Mechanisms for N-Tier Systems in the Presence of Millibottlenecks", In <em>37th International Conference on Distributed Computing Systems (ICDCS'17), Atlanta, GA, June 2017. (Application track)</em></div></li>
</ul>
<h2>2016</h2>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Junhee Park, Qingyang Wang Jack Li, Chien-An Lai, Tao Zhu, Calton Pu</span></strong>“Performance Interference of Memory Thrashing in Virtualized Cloud Environments: A Study of consolidated n-Tier Applications”, In <em>Proc. of the 9th International Conference On Cloud Computing (Cloud'16). (Acceptance rate: 15%) (Runner-Up for Best Paper Award)</em></div></li>
</ul>
<h2>2015</h2>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Jack Li, Yuan Chen, Vanish Talwar, Calton Pu, Dejan Milojicic, </span></strong>"Improving Preemptive Scheduling with Application-Transparent Checkpointing in Shared Clusters", In <em>Middleware 2015.</em> [tbd]</div></li>
</ul>
<h2>2014</h2>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Jack Li, Qingyang Wang, Chien-An Lai, Junhee Park, Daisuke Yokoyama, Calton Pu, </span></strong>"The Impact of Software Resource Allocation on Consolidated n-Tier Applications", In <em>CLOUD 2014.</em></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Qingyang Wang, Jack Li, Chien-An Lai, Chien-An Cho, Yuji Nomura, Calton Pu</span></strong>"Lightning in the Cloud: A Study of Transient Bottlenecks on n-Tier Web Application Performance", In <em>TRIOS 2014.</em></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Chien-An Lai, Qingyang Wang, Josh Kimball, Jack Li, Junhee Park, Calton Pu, </span></strong>"IO Performance Interference among Consolidated n-Tier Applications: Sharing Is Better Than Isolation for Disks", In <em>CLOUD 2014.</em></div></li>
</ul>
<h2>2013</h2>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Qingyang Wang, Yasuhiko Kanemasa, Jack Li, Chien An Lai, Masazumi Matsubara, Calton Pu, </span></strong>"Impact of DVFS on n-Tier Application Performance", In Proc. of ACM Conference on Timely Results in Operating Systems (<strong>TRIOS'13</strong>), Nemacolin Woodlands Resort, Farmington, Pennsylvania, November 2013. <a href="http://www-static.cc.gatech.edu/~qywang/papers/TRIOS13-Qingyang.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Qingyang Wang, Yasuhiko Kanemasa, Jack Li, Deepal Jayasinghe, Toshihiro Shimizu, Masazumi Matsubara, Motoyuki Kawaba, Calton Pu. </span></strong>"Detecting Transient Bottlenecks in n-Tier Applications through Fine-Grained Analysis", In <em>ICDCS 2013.</em><a href="http://www.cc.gatech.edu/systems/projects/Elba/pub/ICDCS13Wang.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Qingyang Wang, Yasuhiko Kanemasa, Jack Li, Deepal Jayasinghe, Toshihiro Shimizu, Masazumi Matsubara, Motoyuki Kawaba, Calton Pu. </span></strong>"An Experimental Study of Rapidly Alternating Bottlenecks in n-Tier Applications", In <em>Cloud 2013.</em><strong><span class="search_hit">(Runner-Up for Best Student Paper Award).</span></strong><a href="http://www.cc.gatech.edu/systems/projects/Elba/pub/Cloud13Wang.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Deepal Jayasinghe, Fabio Oliveira, Florian Rosenberg, Tamar Eilam, Calton Pu. </span></strong>"AESON: A Model-Driven and Fault Tolerant Composite Deployment Runtime for IaaS Clouds", In <em>SCC 2013.</em><a href="http://www.cc.gatech.edu/systems/projects/Elba/pub/ieee-scc-Deepal13.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Deepal Jayasinghe, Josh Kimball, Tao Zhu, Siddharth Choudhary, Calton Pu. </span></strong>"An Infrastructure for Automating Large-scale Performance Studies and Data Processing", In <em>BigData 2013.</em><a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/bigdata.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Deepal Jayasinghe, Josh Kimball, Siddharth Choudhary, Tao Zhu, Calton Pu. </span></strong>"An Automated Approach to Create, Store, and Analyze Large-scale Experimental Data in Clouds", In <em>IRI 2013.</em><strong><span class="search_hit">(Best Student Paper Award).</span></strong><a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/iri.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Junhee Park, Qingyang Wang, Deepal Jayasinghe, Jack Li, Yasuhiko Kanemasa, Masazumi Matsubara, Calton Pu. </span></strong>"Variations in Performance Measurements of Multi-Core Processors: A Study of n-Tier Applications", In <em>SCC 2013.</em><a href="http://www.cc.gatech.edu/systems/projects/Elba/pub/jpark_5982_SCC13.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Jack Li, Qingyang Wang, Deepal Jayasinghe, Junhee Park, Tao Zhu, Calton Pu. </span></strong>"Performance Overhead Among Three Hypervisors: An Experimental Study using Hadoop Benchmarks", In <em>BigData Congress 2013.</em><a href="http://www.cc.gatech.edu/systems/projects/Elba/pub/JackLiBigdata13.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Yasuhiko Kanemasa, Qingyang Wang, Jack Li, Masazumi Matsubara, Calton Pu. </span></strong>"Revisiting Performance Interference among Consolidated n-Tier Applications: Sharing is Better than Isolation", In <em>SCC 2013.</em><a href="http://www.cc.gatech.edu/systems/projects/Elba/pub/scc2013-VMcollocation.pdf">[pdf]</a></div></li>
</ul>
<h2>2012</h2>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Qingyang Wang, Yasuhiko Kanemasa, Motoyuki Kawaba, Calton Pu.</span></strong>"When Average is Not Average: Large Response Time Fluctuations in n-Tier Systems", In <em>ICAC 2012.</em><a href="http://www-static.cc.gatech.edu/~qywang/papers/ICAC12Wang.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Qingyang Wang, Yasuhiko Kanemasa, Jack Li, Deepal Jayasinghe, Motoyuki Kawaba, Calton Pu</span></strong>"Response Time Reliability in Cloud Environments: An Empirical Study of n-Tier Applications at High Resource Utilization", In <em>SRDS 2012.</em><a href="http://www-static.cc.gatech.edu/~qywang/papers/SRDS12Wang.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Deepal Jayasinghe, Galen Swint, Simon Malkowski, Jack Li, Qingyang Wang, Junhee Park and Calton Pu.</span></strong>"Expertus: A Generator Approach to Automate Performance Testing in IaaS Clouds", In <em>CLOUD 2012.</em><a href="http://www-static.cc.gatech.edu/~qywang/papers/Cloud12Deepal.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Jack Li, Qingyang Wang, Yasuhiko Kanemasa, Deepal Jayasinghe, Simon Malkowski, Pengcheng Xiong, Motoyuki Kawaba and Calton Pu.</span></strong>"Profit-Based Experimental Analysis of IaaS Cloud Performance: Impact of Software Resource Allocation", In <em>SCC 2012.</em><a href="http://www-static.cc.gatech.edu/~qywang/papers/SCC2012Jack.pdf">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Simon Malkowski, Yasuhiko Kanemasay, Hanwei Chen, Masao Yamamotoz, Qingyang Wang, Deepal Jayasinghe, Calton Pu, and Motoyuki Kawaba.</span></strong>"Challenges and Opportunities in Consolidation at High Resource Utilization: Non-monotonic Response Time Variations in n-Tier Applications", In <em>CLOUD 2012.</em><a href="http://www-static.cc.gatech.edu/~qywang/papers/CLOUD12Simon.pdf">[pdf]</a></div></li>
</ul>
<h2>2011</h2>
<ul>
	<li><b>Malkowski, S., Hedwig, M., Li, J., Pu, C., and Neumann, D.</b> "Automated Control for Elastic n-Tier Workloads based on Empirical Modeling"<i> Proceedings of the 8th International Conference on Autonomic Computing. ACM.(ICAC 2011)</i> Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/icac11-Malkowski.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Qingyang Wang, Simon Malkowski, Yasuhiko Kanemasa, Deepal Jayasinghe, Pengcheng Xiong, Calton Pu, Motoyuki Kawaba,Lilian Harada</span></strong>, "The Impact of Soft Resource Allocation on n-Tier Application Scalability", In <em>Proceedings of 25th IEEE International Symposium on Parallel and Distributed Processing (IPDPS'11)</em>, May 2011.<a href="http://www-static.cc.gatech.edu/~qywang/papers/IPDPS2011Wang.pdf" target="_blank" rel="noopener">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Pengcheng Xiong, Yun Chi, Shenghuo Zhu, Junichi Tatemura, Calton Pu and Hakan Hacigumus</span></strong>, "ActiveSLA: A Profit-Oriented Admission Control Framework for Database-as-a-Service Providers", In <em>Proceedings of ACM Symposium on Cloud Computing (SOCC'11)</em>, Oct. 2011.</div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Pengcheng Xiong, Zhikui Wang, Simon Malkowski, Qingyang Wang, Deepal Jayasinghe and Calton Pu.</span></strong> "Economical and Robust Provisioning of N-Tier Cloud Workloads: A Multi-level Control Approach", In <em>Proceedings of IEEE International Conference On Distributed Computing Systems (ICDCS) (ICDCS'11)</em>, June 2011.<a href="http://www.cc.gatech.edu/~pxiong3/Papers/ICDCS2011.pdf" target="_blank" rel="noopener">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Pengcheng Xiong, Yun Chi, Shenghuo Zhu, Hyun Jin Moon, Calton Pu and Hakan Hacigumus.</span></strong> "Intelligent Management of Virtualized Resources for Database Management Systems in Cloud Environment", In <em>IEEE International Conference on Data Engineering (ICDE'11)</em>, April 2011.<a href="http://www.cc.gatech.edu/~pxiong3/Papers/ICDE2011.pdf" target="_blank" rel="noopener">[pdf]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Deepal Jayasinghe, Simon Malkowski, Qingyang Wang, Jack Li, Pengcheng Xiong and Calton Pu.</span></strong> "Variations in Performance and Scalability when Migrating n-Tier Applications to Different Clouds", In <em>CLOUD 2011</em> <b>[Best Student Paper Award].</b> <a href="http://www.cc.gatech.edu/grads/i/ijayasin/resources/ieee-cloud-2011.pdf">[pdf]</a>, <a href="http://www.slideshare.net/deepalk/variations-in-performance-and-scalability-when-migrating-ntier-applications-to-different-clouds">[ppt]</a></div></li>
</ul>
<ul>
	<li class="level1">
<div class="li"><strong><span class="search_hit">Deepal Jayasinghe, Tamar Eilam (IBM Research), Malgorzata Steinder(IBM Research), Ian Whally(IBM Research), Ed Snible(IBM Research), and Calton Pu.</span></strong> "Improving Service Performance and Availability on Clouds with Structural Constraint-aware Virtual Machine Placement", <em>SCC 2011</em>.<a href="http://www.cc.gatech.edu/grads/i/ijayasin/resources/ieee-scc-2011.pdf">[pdf]</a></div></li>
</ul>
<h2>2010</h2>
<ul>
	<li><b>Malkowski, S., Hedwig, M., Jayasinghe, D., Pu, C., and Neumann, D.</b>"CloudXplor: A tool for configuration planning in clouds based on empirical data"<i>Proceedings of the 25th Symposium On Applied Computing. ACM.(SAC 2010)</i>Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/SAC2010_1.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Malkowski, S., Jayasinghe, D., Hedwig, M., Park, J., Kanemasa, Y., and Pu, C.</b>"Empirical analysis of database server scalability using an n-tier benchmark with read-intensive workload"<i> Proceedings of the 25th Symposium On Applied Computing. ACM.(SAC2010)</i> Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/SAC2010_2.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Xiong, P., Wang, z., Jung, G., and Pu, C.</b>"Study on performance management and application behavior in virtualized environment"<i>Proceedings of the 12th Network Operation and Management Symposium (NOMS 2010)(short paper)</i> Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/NOMS2010.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<h2>2009</h2>
<ul>
	<li><b>Malkowski, S., Hedwig, M., and Pu, C.</b>"Experimental evaluation of N-tier systems: Observation and analysis of multi-bottlenecks"<i>Proceedings of the 2009 IEEE 12th International Symposium on Workload Characterization(IISWC 2009)</i>, Austin, TX, USA. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/IISWC09.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Malkowski, S., Hedwig, M., Jayasinghe, D., Park, J., Kanemasa, Y., and Pu, C.</b>"A new perspective on experimental analysis of n-tier systems: Evaluating database scalability, multi-bottlenecks, and economical operation"<i>Proceedings of the 5th International Conference on Collaborative Computing: Networking, Applications, and Worksharing (CollaborateCom09)</i>, Washington, DC, USA.. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/CollaborateCom09.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Gueyoung Jung, Kaustubh Joshi, Matti Hiltunen, Richard Schlichting, and Calton Pu.</b>"A Cost-Sensitive Adaptation Engine for Server Consolidation of Multi-Tier Applications. "<i>ACM/IFIP/USENIX 10th International Middleware Conference (Middleware 2009)</i>, Nov. 30 - Dec. 4, 2009, Urbana Champaign, Illinois, USA.. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/Middleware09.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Gueyoung Jung, Kaustubh Joshi, and Matti Hiltunen.</b>"Performance Aware Regeneration in Virtualized Multitier Applications. "<i>Proactive Failure Avoidance Recovery and Maintenance (PFARM 2009)</i>, June 29, 2009, Estoril, Lisbon, Portugal. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/PFARM09.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<h2>2008</h2>
<ul>
	<li><b>Gueyoung Jung, Matti Hiltunen, Kaustubh Joshi, Richard Schlichting and Calton Pu.</b>"Generating Adaptation Policies for Multi-Tier Applications in Consolidated Server Environments. "<i>IEEE International Conference on Autonomic Computing (ICAC 2008)</i>, June 2-6, 2008, Chicago, IL. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/ICAC08.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<h2>2007</h2>
<ul>
	<li><b>Simon Malkowski, Markus Hedwig, Jason Parekh, Calton Pu, and Akhil Sahai. </b>"Bottleneck Detection Using Statistical Intervention Analysis." <i>IFIP/IEEE Distributed Systems: Operations and Management (DSOM 2007)</i> , October 29-31, 2007, San Jose, California, USA. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200710_DSOM07.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Calton Pu, Akhil Sahai, Jason Parekh, Gueyoung Jung, Ji Bae, You-Kyung Cha, Timothy Garcia, Danesh Irani, Jae Lee, Qifeng Lin.</b> "An Observation-Based Approach to Performance Characterization of Distributed n-Tier Applications." <i>IEEE International Symposium on Workload Characterization (IISWC 2007)</i>, September 27-29, 2007, Four Point Sheraton Logan Airport, Boston, MA. Download:<a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200709_iiswc07.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Qinyi Wu, Calton Pu, Akhil Sahai, Roger Barga.</b> "Categorization and Optimization of Synchronization Dependencies in Business Processes." <i>Proceedings of the IEEE 2007 International Conference on Data Engineering (ICDE'07)</i>, Istambul, April 2007. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200704_Qinyi.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<h2>2006</h2>
<ul>
	<li><b>Gueyoung Jung, Galen Swint, Jason Parekh, Calton Pu, and Akhil Sahai.</b>"Detecting Bottleneck in n-Tier IT Applications through Analysis." <i>IFIP/IEEE Distributed Systems: Operations and Management (DSOM 2006)</i>, October 23-25, 2006, Dublin, Ireland. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200610_dsom2006.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Qinyi Wu, Calton Pu, Akhil Sahai, Roger Barga, Gueyoung Jung, Jason Parekh, Galen Swint.</b> "DSCWeaver: Synchronization-Constraint Aspect Extension to Procedural Process Specification Languages." <i>IEEE International Conference on Web Services (ICWS 2006)</i>, September 18-22, 2006, Chicago.Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200609_ICWS_DSCWeaver.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Qinyi Wu, Calton Pu, Akhil Sahai.</b> "DAG Synchronization Constraint Language for Business Processes." <i>In Proceedings of IEEE Conference on ECommerce Technology (CEC'06)</i>, June 26-29, 2006, San Francisco, California, USA. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200606_CEC_DSCL_Elba.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Jason Parekh, Gueyoung Jung, Galen Swint, Calton Pu, Akhil Sahai.</b>"Comparison of Performance Analysis Approaches for Bottleneck Detection in Multi-Tier Enterprise Applications." <i>IEEE International Workshop on Quality of Service</i>, June 19-21, 2006, Yale University, New Haven, CT. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200606_IWQoS2006.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Galen Swint, Gueyoung Jung, Calton Pu, Akhil Sahai.</b> "Automated Staging for Built-to-Order Application Systems." <i>IFIP/IEEE Network Operations and Management Symposium (NOMS 2006)</i>, April 2006, Vancouver, Canada. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200604_NOMS_mulini.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<h2>2005</h2>
<ul>
	<li><b>Galen Swint, Calton Pu, Charles Consel, Gueyoung Jung, Akhil Sahai, Wenchang Yan, Younggyun Koh, Qinyi Wu. </b>"Clearwater - Extensible, Flexible, Modular Code Generation." <i>Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering (ASE 2005)</i>, November 7-11, 2005. Long Beach, California. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200511_ASE.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>
<ul>
	<li><b>Sahai, Akhil, Calton Pu, Gueyoung Jung, Qinyi Wu, Wenchang Yan, Galen Swint. </b>"Towards Automated Deployment of Built-to-Order Systems." <i>Proceedings of the 16th IFIP/IEEE Distributed Systems; Operation and Management (DSOM 2005)</i>, October 24-26, 2005. Barcelona, Spain. Download: <a href="https://www.cc.gatech.edu/systems/projects/Elba/pub/200510_DSOM.pdf" target="_blank" rel="noopener">[pdf]</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date>2018-04-09 19:42:03</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:42:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>publications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629054743]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Instrumentation</title>
		<link>https://gtelbatutorial.wordpress.com/?p=188</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2018-04-09 19:42:21</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Instrumentation</title>
		<link>https://gtelbatutorial.wordpress.com/?p=189</link>
		<pubDate>Mon, 09 Apr 2018 19:42:23 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/instrumentation/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date>2018-04-09 19:42:23</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:42:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>instrumentation__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629064467]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523303038]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[instrumentation]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Methodology and Data Analysis</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/methodology-and-data-analysis/</link>
		<pubDate>Mon, 09 Apr 2018 19:43:05 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/methodology-and-data-analysis/</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Analysis Outline</h4>
<ol>
	<li>Explain your approach to data transformation, integration, and management.</li>
	<li>Detail how you use the data gathered to isolate millibottlenecks and diagnose their root cause.</li>
	<li>Describe the steps needed to analyze your experiment:
<ol>
	<li>Copy the tarball archive containing the experiment data to a location proximate to the cloned Elba Github repository.</li>
	<li>Unzip the copied archive.</li>
	<li>Navigate to the parsers directory of the cloned Elba Github repository.</li>
	<li>Execute "runparsers.sh" by providing the following:
<ol>
	<li>Path to the directory containing the unzipped archive</li>
	<li>Target location to store the processing results</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4>milliAnalyst</h4>
<ul>
	<li>Uniform data interface consisting of three entities:​
<ul>
	<li>PointinTime ​</li>
	<li>DownstreamServiceTime (DST)​</li>
	<li>ResourceObservations​</li>
</ul>
</li>
	<li>Each of these entities can have a variable number of number of attributes ​</li>
	<li>Experiment specification impacts this, i.e. the number of nodes determines the number of DST attributes​</li>
	<li>Number of attributes can also depend on characteristics that might not be known prior to running an experiment, such as a node’s number of CPUs, cores, NICs or disks​</li>
	<li>Method needs to handle this variable number of attributes, i.e. no fixed schemas​</li>
	<li>Method needs to be able to integrate data across time and space​</li>
	<li>Representation needs to be able to handle data anomalies and support efficient filtering and retrieval of small data subsets across all of the measurements​</li>
	<li>Support graph-based reasoning​</li>
</ul>
<h4>milliBottlenecks</h4>
<ul>
	<li>Millibottlenecks happen in different system layers​
<ul>
	<li>System software: Java garbage collection​</li>
	<li>Processor architecture: DVFS​</li>
	<li>Application Virtual Machine consolidation​</li>
</ul>
</li>
	<li>Though short-lived, millibottlenecks have big impact<b> </b>on n-tier application performance​
<ul>
	<li>VLRT requests​</li>
	<li>Queue amplification from n-tier system component dependencies​</li>
</ul>
</li>
</ul>
<img class="alignnone size-full wp-image-104" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-07-24-pm.png" alt="Screen Shot 2018-03-28 at 7.07.24 PM" width="818" height="434" />

Above is the work flow of milliBottleneck discovery. Users define the configuration file at first, and the script generator generates scripts which set up the experiment environment and deploy milliScope as well as other softwares. mScopeDataTransformer converts these unstructured data to structured tuples in mScopeDB as described in Figure 3 for advanced analysis.

<img class=" size-full wp-image-216 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-39-26-pm.png" alt="Screen Shot 2018-04-10 at 12.39.26 PM" width="475" height="596" />
<ul>
	<li>VLRT requests (see (a)) caused by queue peaks in Apache (see (b)) when the system is at workload 9000 clients.</li>
</ul>
<img class="  wp-image-215 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-39-49-pm.png" alt="Screen Shot 2018-04-10 at 12.39.49 PM" width="381" height="728" />
<ul>
	<li>Queue peaks in Apache (a) due to very short bottlenecks caused by Java GC in Tomcat (d).</li>
</ul>
<h4>Solutions</h4>
<ul>
	<li>Three kinds of solutions for Latency Long Tail Problem​
<ul>
	<li>Bug-fix, specific solutions for each cause (many causes, not all can be fixed)​</li>
	<li>General solutions for transient bottlenecks (primarily improved queue management)​</li>
	<li>Last-resort solution​</li>
</ul>
</li>
	<li>Bug-Fix for Specific Solutions
<ul>
	<li>Some cases can be “fixed”​
<ul>
	<li>Java GC in JVM 1.5 was “fixed” in JVM 1.6​</li>
	<li>DVFS anti-synchrony can be “fixed” by changing control periods (some complications)​</li>
</ul>
</li>
	<li>Other cases are harder to fix​
<ul>
	<li>VM consolidation case (noisy neighbor) is really non-deterministic​</li>
</ul>
</li>
	<li>Kernel daemon processes (many)​</li>
</ul>
</li>
	<li>General Solutions
<ul>
	<li>Approaches that address transient bottlenecks (instead of specific “bugs”)​
<ul>
	<li>3 stages: (1) transient bottleneck formation, (2) queue amplification, (3) packet retransmission​</li>
</ul>
</li>
	<li>(1) Transient bottleneck detection and remedial action (e.g., disruption)​
<ul>
	<li>Difficult, due to the short lifespan of transient bottlenecks​</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2018-04-09 19:43:05</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:43:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>methodology-and-data-analysis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629082907]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1523302989]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Processing and Management</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/data-processing-and-management-2/</link>
		<pubDate>Mon, 09 Apr 2018 19:43:24 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/data-processing-and-management-2/</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>milliScope Data Flow and Architecture</h4>
<img class="alignnone size-full wp-image-103" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-05-35-pm.png" alt="Screen Shot 2018-03-28 at 7.05.35 PM" width="868" height="373" />

The data transformation flow of milliScope. The event mScopeMonitors capture
timestamps, as shown in Figure 4, in the component logs, while the resource mScopeMonitors record the system resource utilization. mScopeDataTranformer converts these unstructured data to structured tuples and loads them into a dynamic data warehouse, mScopeDB, for advanced analysis.
<h6>mScopeData Transformer Design</h6>
<ul>
	<li style="list-style-type:none;">
<ul>
	<li>Data pipeline transforms highly variable monitoring data into aggregates that are helpful in millibottleneck isolation and root cause analysis​</li>
	<li>These aggregates are:​
<ul>
	<li>Point-in-Time Response Time​</li>
	<li>Queue Length​</li>
	<li>Downstream Service Time​</li>
	<li>Resource Consumption Descriptive Statistics​</li>
</ul>
</li>
</ul>
</li>
</ul>
<h6>Other Parsers</h6>
&nbsp;
<ul>
	<li>Parsers – extract request-level data out of component logs.
<ul>
	<li>ServiceTime – reads request-level data and calculates dst​</li>
	<li>Pointintime – reads request-level data (Apache) and calculated pit​</li>
	<li>Multifile – basically joins and aggregates data in uniform entities (dst_table, resource_table); pit is independent​</li>
</ul>
</li>
	<li>How to reconcile not ingesting XML into mScopeDataTransformer?​
<ul>
	<li>Component parsers were supposed to output XML​</li>
	<li>Even if they were, we still need to calculate aggregates like queue lengths and dst​
<ul>
	<li>Prob in database; the issue with this is trying to do the integration and calculation when the schemas change…​</li>
	<li>Or, compute aggregates externally and import​</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>191</wp:post_id>
		<wp:post_date>2018-04-09 19:43:24</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:43:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>data-processing-and-management-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629091231]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Instrumentation</title>
		<link>https://gtelbatutorial.wordpress.com/?p=192</link>
		<pubDate>Mon, 09 Apr 2018 19:43:47 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/instrumentation-2/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2018-04-09 19:43:47</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:43:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>instrumentation-2__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629101580]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523459351]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[instrumentation-2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tools and Instrumentation</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/tools-2/</link>
		<pubDate>Mon, 09 Apr 2018 19:44:08 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/tools-2/</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>milliMonitor</h4>
<img class="alignnone size-full wp-image-104" src="https://gtelbatutorial.files.wordpress.com/2018/03/screen-shot-2018-03-28-at-7-07-24-pm.png" alt="Screen Shot 2018-03-28 at 7.07.24 PM" width="818" height="434" />
<ul style="font-weight:400;">
	<li>Each component aligns with one of the phases of our pipeline​</li>
	<li>Generate Experiment – specifying an experiment and generating artifacts​</li>
	<li>Execute Experiment – automatically provisioning a cloud and deploying the artifacts​</li>
	<li>Analyze Experimental Data – automatically collecting, parsing and reasoning over the data​</li>
</ul>
<h4>milliMonitor High Level Design</h4>
<ul style="font-weight:400;">
	<li>Templates &amp; Script Generator​
<ul>
	<li>Aspect-oriented code generator​</li>
	<li>Specializes scripts, benchmark source code and configuration using XML-based spec.​</li>
</ul>
</li>
	<li>mScope Monitors​
<ul>
	<li>Inject measurement schema into benchmark​</li>
	<li>Record identifier, timestamps and output in native benchmark logs​</li>
</ul>
</li>
	<li>mScope Data Transformer, mScope DB​
<ul>
	<li>Ingest and normalize data from mScope monitors​</li>
	<li>Dynamic database to persist transformed data​</li>
</ul>
</li>
	<li>milliAnalyst​
<ul>
	<li>Combines known millibottleneck mechanisms with data​</li>
	<li>Reduces millibottleneck identification and root cause isolation / determination into a longest path problem</li>
</ul>
</li>
</ul>
<h4>mScopeMonitors</h4>
<ul style="font-weight:400;">
	<li>Currently, we have implemented Apache, Tomcat, CJDBC, and Nginx event mScopeMonitors ​</li>
	<li>Each event mScopeMonitor records four timestamps for each request on each component, which can be used to rebuild the causal relationship.​</li>
</ul>
<img class="alignnone size-full wp-image-206" src="https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-09-at-4-05-33-pm.png" alt="Screen Shot 2018-04-09 at 4.05.33 PM" width="557" height="381" />
<ul style="font-weight:400;">
	<li>Collectl: A monitor tool capable of recording system resource utilization, including CPU, memory, process runtime state, network and disk I/O at fine granularity (every 50ms).​</li>
	<li>SAR: collects, reports and saves system activity information (CPU, memory, disks, interrupts, network interfaces, TTY, kernel tables,etc.)​</li>
	<li>IOStat: reports CPU statistics and input/output statistics for devices, partitions and network filesystems.​</li>
</ul>
<h4>Event Monitors and Resource Monitors</h4>
<h4>milliAnalyst</h4>
<ul>
	<li>Uniform data interface consisting of three entities:​
<ul>
	<li>PointinTime ​</li>
	<li>DownstreamServiceTime (DST)​</li>
	<li>ResourceObservations​</li>
</ul>
</li>
	<li>Each of these entities can have a variable number of number of attributes ​</li>
	<li>Experiment specification impacts this, i.e. the number of nodes determines the number of DST attributes​</li>
	<li>Number of attributes can also depend on characteristics that might not be known prior to running an experiment, such as a node’s number of CPUs, cores, NICs or disks​</li>
	<li>Method needs to handle this variable number of attributes, i.e. no fixed schemas​</li>
	<li>Method needs to be able to integrate data across time and space​</li>
	<li>Representation needs to be able to handle data anomalies and support efficient filtering and retrieval of small data subsets across all of the measurements​</li>
	<li>Support graph-based reasoning​</li>
</ul>
<h4>Cloud Deployment</h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date>2018-04-09 19:44:08</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:44:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tools-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629110396]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Generation</title>
		<link>https://gtelbatutorial.wordpress.com/?p=195</link>
		<pubDate>Mon, 09 Apr 2018 19:44:34 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/experiment-generation-2/</guid>
		<description></description>
		<content:encoded><![CDATA[Experimental artifacts like the scripts and software configuration are created dynamically by the code generation pipeline. This pipeline can be executed using the following commands, substituting the values for and as provided in Step 2:
<pre><code>ssh node1.
cd /proj/Infosphere//common/rubbosMulini6
</code></pre>
Finally, open <em>runRubbosExperiment.sh</em> and substituting with the specified values
<pre><code>BUILD_DIR = /proj/Infosphere/
OUTPUT_HOME =  from Step2
</code></pre>
The script can now be run with the following command where corresponds to the name of the Experiment XML file from Step 2:
<pre><code>./runRubbosExperiment.sh 
</code></pre>
In the case of our running example, this should be:
<pre><code>./runRubbosExperiment.sh RUBBOS-1111-EMULAB-.xml
</code></pre>
<em>Important Notes</em>:
<ul>
	<li>Activating the experiment on <em>emulab</em>, ("swapping it in") and logging into node1 is not a <em>strict</em> dependency. Since the image and <em>emulab</em> environment already have the proper environment variables set, this step ensures consistency during experiment generation.</li>
	<li>The script should be run from a location that has the environment variable, JAVA_HOME, set. Nodes using the FC15RubOral image already have JAVA_HOME set. So, we recommend connecting to the Control node with <strong>ssh</strong> to execute this step.</li>
	<li>Sample Experiment XML files are available in the <code>/examples</code> directory in our <a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git">Github repository.</a></li>
</ul>
<h4>Code Generator Description</h4>
In general, our code generator is orchestrated by way of the <code>runRubbosExperiment.sh</code> script. This script calls a Java program, DeployScriptGenerator, which generates all of the necessary scripts and artifacts for executing an experiment in one of the supported infrastructures. The following describes the script more generally and the organization of the code generator source code:
<ol>
	<li>Code Generator Organization:
<ul>
	<li>Base directory, <code>../common/rubbosMulini6</code>, contains the aforementioned script. It also acts as a reference point for executing the code generator and pipeline.</li>
	<li>Two sub-directories house the code generator source and base artifacts:
<ul>
	<li><code>../rubbosMulini6/templates</code> - contains the XSL-based code templates that serve as a basis for the experiment scripts</li>
	<li><code>../rubbosMulini6/source</code> - contains the Java source code for the code generator</li>
</ul>
</li>
</ul>
</li>
	<li>Parameter Descriptions. The <code>runRubbosExperiment.sh</code> script uses the following parameters in addition to those mentioned at the beginning of this Step. These might need to be altered depending on the environment used for generating experiments:
<ul>
	<li>MULINI_DIR: specifies the base directory of the code generator, i.e. <code>../rubbosMulini6</code>from above</li>
	<li>EXP_DIR: specifies the path to Experiment XML files, i.e. the location for the filename specified as a command line parameter</li>
</ul>
</li>
	<li><em>Dependencies</em>:
<ul>
	<li>Directories, <code>/templates</code> and <code>/source</code> need to be located in the same directory as the aforementioned script. Currently, all of these appear under <code>/common</code> in the source code repository under <code>/code_generator/</code></li>
	<li>Value of <code>OUTPUT_HOME</code> parameter used in this script needs to be the same as the value of the <code>OUTPUT_HOME</code> parameter specified in the referenced Experiment XML file</li>
</ul>
</li>
</ol>
<h4><a id="user-content-step-4-executing-the-experiment-on-emulab-cluster" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-4-executing-the-experiment-on-emulab-cluster"></a>Step 4: Executing the Experiment on Emulab cluster</h4>
Continuing with our example, perform the following preliminaries by substituting the values for parameters, and , as provided in Step 2:
<pre><code>ssh node1.  
cd /scripts  
</code></pre>
Finally, the experiment can be run by executing the ‘run.sh’ script with the following command:
<pre><code>./run.sh
</code></pre>
While executing an experiment in this manner works, there a few downsides to executing an experiment this way. These limitations are:
<ul>
	<li>Error messages or standard output will not be captured for future analysis. This makes the verification that the experiment ran "correctly" rather difficult as debugging would require examining terminal-based output.</li>
	<li>Secondly, since this command is executed over an SSH session, it could timeout if the experiment execution time exceeds the default session timeout, causing an abrupt termination of the experiment prior to its natural completion. These problems are resolved by using the following, alternative method.</li>
</ul>
Running experiments under a <code>screen</code> session mitigates these problems. [Ensure the Linux program <em>screen</em> is installed prior to executing an experiment with this method.] The Linux program, <em>screen</em>, enables scripts to be executed independent of an active <strong>ssh</strong> session. To run an experiment under <em>screen</em>, use the following:
<pre><code>./run_screen.sh
</code></pre>
This script creates a new session, navigates to the experiment at the provided path, runs the experiment while storing the output, and detaches the screen from your current shell. The script also saves all output to a log file in the specified directory.

To re-attach to the screen session, a user can run the following command and replacing with the <em>Experiment Name</em> value from Step 1:
<pre><code>screen –r </code></pre>
<code>
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2018-04-09 19:44:34</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:44:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experiment-generation-2__trashed</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629122800]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1523303077]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1523457462]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_desired_post_slug</wp:meta_key>
			<wp:meta_value><![CDATA[experiment-generation-2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Customization</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/experiment-creation/</link>
		<pubDate>Mon, 09 Apr 2018 19:44:48 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/experiment-creation/</guid>
		<description></description>
		<content:encoded><![CDATA[To increase the efficiency and speed of cloud-based systems research, we rely on code generation techniques to create experiments. Before generating artifacts such as installation scripts and configuration, a "reservation" needs to be created on one of the supported public clouds. In addition, the experiment configuration needs to be supplied to the generator. The following two steps accomplish these tasks while the final step outputs the necessary experimental artifacts for running the desired experiment on the public cloud.

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Customization</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-1</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-2</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-3</a>

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-4</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-5</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-6</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date>2018-04-09 19:44:48</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:44:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>experiment-creation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1523303091]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629128850]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tutorial</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/tutorial-2/</link>
		<pubDate>Mon, 09 Apr 2018 19:45:03 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/tutorial-2/</guid>
		<description></description>
		<content:encoded><![CDATA[This tutorial is split into three main sections which are set-up, experiment generation, and experiment execution. If doing this tutorial for the first time please start from set-up and follow in chronological order.

<a class="button" href="https://gtelbatutorial.wordpress.com/set-up/">Set-Up</a>

Set-up will take the user through creating an Emulab account, generating a SSH key, and creating the correct directories in which to run the experiment.

<a class="button" href="https://gtelbatutorial.wordpress.com/experiment-generation/">Experiment Generation</a>

The experiment generation section will take the user through creating the experiment, describing the experiment topology in the xml file, assigning parameters, and generating the script and code needed for the experiment.

<a class="button" href="https://gtelbatutorial.wordpress.com/Experiment-Execution/">Experiment Execution</a>

The experiment execution section will take the user through the actual execution of the experiment and the user can then go to our <a href="https://gtelbatutorial.wordpress.com/experiment-analysis/">analysis section</a> to properly analyze their results.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date>2018-04-09 19:45:03</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:45:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tutorial-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629135513]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1523303107]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to the Elba Project</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/introduction-to-the-elba-project/</link>
		<pubDate>Mon, 09 Apr 2018 19:45:23 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/2018/04/09/introduction-to-the-elba-project/</guid>
		<description></description>
		<content:encoded><![CDATA[<a class="button" href="https://gtelbatutorial.wordpress.com/linear-tutorial/">Tutorial</a>   <a class="button" href="https://gtelbatutorial.wordpress.com/faqs/">FAQs</a>
<p style="text-align:left;"><b>Background.</b> One of the main research challenges in the Adaptive Enterprise vision is the automation of large application system management, encompassing design, deployment, to production use, and capturing application monitoring, evaluation, and evolution. Current approaches to enterprise system evaluation and tuning happen on production systems where the real workload to the deployed system is analyzed on-line and corresponding measurements are taken. In addition, many of these systems go through a detailed staging process that is mostly manual, complex and time-consuming. During the staging process the system to be produced is subjected to workloads to determine whether it will meet the production workloads. Finally, data gleaned from the staging process can be re-used to guide future designs and for management of system during operations.</p>
<b>Project Motivation.</b> We want to verify and test an application system deployment plan in a staging environment before committing it to a production environment. Manual verification of a deployment is cumbersome, time consuming, and error prone. This problem will grow in importance in the deployment of increasingly larger and more sophisticated applications. Therefore, it will be increasingly important to have an automatic method for executing a benchmark on the deployment plan to validate the deployment during staging, instead of debugging a deployment during production use.

<img class=" size-full wp-image-13 aligncenter" src="https://gtelbatutorial.files.wordpress.com/2018/02/elba_arch.jpg" alt="ELBA_ARCH" width="585" height="329" />
<h2>Contributions and Approaches</h2>
<h3>Automated Deployment and Staging Infrastructure</h3>
<b>Approach.</b> In our project we intend to automate the staging process thus reducing the time and manual labor involved in the process, increase confidence, and extract predictive performance data. Further, the automation will support a more thorough application test and validation in a larger state space, since we plan to automate the monitoring and analysis steps to speed up the refinement of application deployment. Our tools will translate a high-level specification of performance and availability (e.g., SLA requirements) into executable deployment, test, evaluation, and analysis code for the staging phase. This work builds on our experience and technology previously developed such as evaluation of SmartFrog and translation of Quartermaster design specifications into SmartFrog deployment programs.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure below, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.
<h3>Performance Cartography</h3>
<b>Approach.</b> In our evaluation, we have created a powerful infrastructure to generate the full set of experimental specifications to measure the performance of standard benchmarks over a wide range of hardware and software configurations. We have decided to use this infrastructure to study experimentally the performance variations of these benchmarks over a range of different configurations. Without our code generation infrastructure, past performance studies have been limited in scope due to practical problems of managing the number of experiments. We have used the Mulini code generator to create a large number of performance measurement experiments, run the experiments and collect/analyze data automatically, and used the analysis to generate Performance Maps.

<b>System Architecture.</b> The overall architecture of our project is shown in the figure above, where we achieve full automation in system deployment, evaluation, and evolution, by creating code generation tools to link the different steps of deployment, evaluation, reconfiguration, and redesign in the application deployment lifecycle.

<b>Research Contributions.</b> Currently, there is no reliable way to predict the performance of complex applications (e.g., N-Tier distributed application such as Rubis and TPC-App) in a complex environment(e.g., data centers). The limitations of analytical methods are due to the strong assumptions needed for solving the analytical models (e.g., based on queuing theory) that are valid only for relatively simple environments. The limitations of experimental measurements are due to the complexity of managing the many configuration combinations in practice. Our work leverages the Elba infrastructure (particularly, the Mulini generator) to generate and manage the experiments, and then use automated analysis techniques and tools to digest the information and create a Performance Map. The Performance Map is a reliable indicator of complex system performance, since it reflects actually measured experiments on the Performance Terrain (modulo tuning and other complications).
<h3>Importance of N-Tier Systems</h3>
<a class="button" href="https://gtelbatutorial.wordpress.com/latency-long-tail-problem">Latency Long Tail Problem</a>
<ul style="font-weight:400;">
	<li>Scalable distributed architecture​
<ul>
	<li>Division of labor for low-latency tasks​</li>
	<li>Web servers for parsing/HTML handling​</li>
	<li>App servers for business logic handling​</li>
	<li>DB servers for consistent data management​</li>
</ul>
</li>
	<li>Separation of stateless from stateful​
<ul>
	<li>DB servers handle the difficult state part​</li>
	<li>Web and App servers are “stateless” so more instances can be easily added, if needed​.</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2018-04-09 19:45:23</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:45:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduction-to-the-elba-project</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16629143850]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1523303126]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-09 at 3.55.20 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/tools-2/screen-shot-2018-04-09-at-3-55-20-pm/</link>
		<pubDate>Mon, 09 Apr 2018 19:55:49 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-09-at-3-55-20-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date>2018-04-09 19:55:49</wp:post_date>
		<wp:post_date_gmt>2018-04-09 19:55:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-09-at-3-55-20-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-09-at-3-55-20-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-09-at-3-55-20-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:977;s:6:"height";i:551;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-09-at-3-55-20-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:227659;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-09 at 4.00.02 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/introduction-to-the-elba-project/screen-shot-2018-04-09-at-4-00-02-pm/</link>
		<pubDate>Mon, 09 Apr 2018 20:00:18 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-09-at-4-00-02-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2018-04-09 20:00:18</wp:post_date>
		<wp:post_date_gmt>2018-04-09 20:00:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-09-at-4-00-02-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>198</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-09-at-4-00-02-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-09-at-4-00-02-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:805;s:6:"height";i:436;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-09-at-4-00-02-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:265551;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-09 at 4.05.33 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/tools-2/screen-shot-2018-04-09-at-4-05-33-pm/</link>
		<pubDate>Mon, 09 Apr 2018 20:05:49 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-09-at-4-05-33-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2018-04-09 20:05:49</wp:post_date>
		<wp:post_date_gmt>2018-04-09 20:05:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-09-at-4-05-33-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>194</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-09-at-4-05-33-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-09-at-4-05-33-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:557;s:6:"height";i:381;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-09-at-4-05-33-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:71564;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Latency Long Tail Problem</title>
		<link>https://gtelbatutorial.wordpress.com/latency-long-tail-problem/</link>
		<pubDate>Tue, 10 Apr 2018 16:32:01 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=210</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Latency Long Tail Problem</h3>
<ul>
	<li><span class="TextRun SCXP110972663" lang="EN-US" xml:lang="EN-US"><span class="NormalTextRun SCXP110972663">At moderate CPU utilization levels (about 60% at 9000 users), 4% of requests take several seconds, instead of milliseconds</span></span></li>
</ul>
<img class="alignnone size-full wp-image-211" src="https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-29-02-pm.png" alt="Screen Shot 2018-04-10 at 12.29.02 PM" width="1028" height="315" />
<ul>
	<li>The graphs above show frequency of requests by their response times at two representative workloads. The system is at moderate utilization, but the latency long tail problem can be clearly seen.</li>
	<li>No system resource is near saturation​
<ul>
	<li>Very Long Response Time (VLRT) requests start to appear at moderate utilization levels (often at 50% or lower)​</li>
</ul>
</li>
	<li>VLRT requests themselves are not bugs:​
<ul>
	<li>They only take milliseconds when run by themselves​</li>
	<li>Each run presents different VLRT requests​</li>
</ul>
</li>
	<li>VLRT requests appear and disappear too quickly for most monitoring tools​</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2018-04-10 16:32:01</wp:post_date>
		<wp:post_date_gmt>2018-04-10 16:32:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>latency-long-tail-problem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-10 at 12.29.02 PM</title>
		<link>https://gtelbatutorial.wordpress.com/latency-long-tail-problem/screen-shot-2018-04-10-at-12-29-02-pm/</link>
		<pubDate>Tue, 10 Apr 2018 16:31:25 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-29-02-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date>2018-04-10 16:31:25</wp:post_date>
		<wp:post_date_gmt>2018-04-10 16:31:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-10-at-12-29-02-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>210</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-29-02-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-12-29-02-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1028;s:6:"height";i:315;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-12-29-02-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:41060;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-10 at 12.39.49 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/methodology-and-data-analysis/screen-shot-2018-04-10-at-12-39-49-pm/</link>
		<pubDate>Tue, 10 Apr 2018 16:42:11 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-39-49-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date>2018-04-10 16:42:11</wp:post_date>
		<wp:post_date_gmt>2018-04-10 16:42:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-10-at-12-39-49-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>190</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-39-49-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-12-39-49-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:358;s:6:"height";i:684;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-12-39-49-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:82847;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-10 at 12.39.26 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/methodology-and-data-analysis/screen-shot-2018-04-10-at-12-39-26-pm/</link>
		<pubDate>Tue, 10 Apr 2018 16:42:12 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-39-26-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2018-04-10 16:42:12</wp:post_date>
		<wp:post_date_gmt>2018-04-10 16:42:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-10-at-12-39-26-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>190</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-12-39-26-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-12-39-26-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:475;s:6:"height";i:596;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-12-39-26-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:75798;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-10 at 2.32.55 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/tutorial-2/screen-shot-2018-04-10-at-2-32-55-pm/</link>
		<pubDate>Tue, 10 Apr 2018 18:33:06 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-32-55-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2018-04-10 18:33:06</wp:post_date>
		<wp:post_date_gmt>2018-04-10 18:33:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-10-at-2-32-55-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>197</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-32-55-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-2-32-55-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:522;s:6:"height";i:23;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-2-32-55-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:11263;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-10 at 2.37.35 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/tutorial-2/screen-shot-2018-04-10-at-2-37-35-pm/</link>
		<pubDate>Tue, 10 Apr 2018 18:37:46 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-37-35-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date>2018-04-10 18:37:46</wp:post_date>
		<wp:post_date_gmt>2018-04-10 18:37:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-10-at-2-37-35-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>197</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-37-35-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-2-37-35-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:363;s:6:"height";i:24;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-2-37-35-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:9588;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-10 at 2.38.20 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/tutorial-2/screen-shot-2018-04-10-at-2-38-20-pm/</link>
		<pubDate>Tue, 10 Apr 2018 18:38:35 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-38-20-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2018-04-10 18:38:35</wp:post_date>
		<wp:post_date_gmt>2018-04-10 18:38:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-10-at-2-38-20-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>197</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-38-20-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-2-38-20-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:354;s:6:"height";i:83;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-2-38-20-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:14952;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen Shot 2018-04-10 at 2.38.46 PM</title>
		<link>https://gtelbatutorial.wordpress.com/2018/04/09/tutorial-2/screen-shot-2018-04-10-at-2-38-46-pm/</link>
		<pubDate>Tue, 10 Apr 2018 18:39:06 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">http://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-38-46-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date>2018-04-10 18:39:06</wp:post_date>
		<wp:post_date_gmt>2018-04-10 18:39:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2018-04-10-at-2-38-46-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>197</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-38-46-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-2-38-46-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:314;s:6:"height";i:18;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/eb7/143146230/files/2018/04/screen-shot-2018-04-10-at-2-38-46-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:9702;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Emulab Tips</title>
		<link>https://gtelbatutorial.wordpress.com/emulab-tips/</link>
		<pubDate>Wed, 11 Apr 2018 12:44:24 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=245</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight:400;">General Tips</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">For terminal: if you find your terminal path has reffered you back to your local machine user path, log back in by using the following:</span>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;">**this will need a code box*** </span><i><span style="font-weight:400;">ssh &lt;username&gt;@users.emulab.net  </span></i><span style="font-weight:400;">and enter your password when prompted</span></li>
</ol>
</li>
	<li style="font-weight:400;"><span style="font-weight:400;">Important emulab website: </span><a href="https://wiki.emulab.net/wiki"><span style="font-weight:400;">https://wiki.emulab.net/wiki</span></a>
<ol>
	<li style="font-weight:400;"><span style="font-weight:400;"> For any questions on the basics of emulab, please refer the above website</span></li>
	<li style="font-weight:400;"><span style="font-weight:400;">(I have a ton of screenshots of the website and what it looks like once you log in, but we can decide later which screenshots we want to include)</span></li>
</ol>
</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date>2018-04-11 12:44:24</wp:post_date>
		<wp:post_date_gmt>2018-04-11 12:44:24</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>emulab-tips</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Set-Up</title>
		<link>https://gtelbatutorial.wordpress.com/set-up/</link>
		<pubDate>Wed, 11 Apr 2018 15:12:02 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=257</guid>
		<description></description>
		<content:encoded><![CDATA[Create account on the Emulab cloud infrastructure at <a href="http://www.emulab.net/index.php3"><i>emulab.net</i></a> and wait for approval

Once approved for an account fill out your information- make note of the following two points:
<ul>
	<li>When filling out information for your account ensure that you put “Infosphere” for both the group AND the project
<ul>
	<li style="list-style-type:none;">
<ul>
	<li>Please note: if you forget, this can be set after logging into Emulab and clicking the “Edit Profile” link</li>
	<li>Select <b>bash </b>under the shell portion</li>
</ul>
</li>
</ul>
</li>
</ul>
<a class="button" href="https://gtelbatutorial.wordpress.com/2018/02/22/ssh">SSH Generation</a>

Create a public RSA (SSH) key on your local ‘nix machine under a <b>bash</b> shell.

Add the SSH key to your account by selecting “My Account” and then “Edit SSH keys” on the left hand side of the page.  This is where you would paste your SSH key from the prior step.

Email Josh Kimball with your GitHub username to gain access into the GitHub repository
<ul>
	<li>Elba email address: <a href="mailto:Elba@cc.gatech.edu">Elba@cc.gatech.edu</a></li>
	<li>If you are unfamiliar with GitHub, please create an account at GitHub.com</li>
</ul>
Using your computer terminal, create a directory on Emulab’s file share, users.emulab.net, by executing the following commands:
<ul>
	<li style="list-style-type:none;">
<ul>
	<li>Please note: substitute for your Emulab account username
<ul>
	<li>Example: JaneDoe@users.emulab.net</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>ssh @users.emulab.net  
 cd /proj/Infosphere  
 mkdir  
</code></pre>
Use the following webpage to clone the ‘Alpha release of Project NewElba’ into your directory: <a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git">https://github.com/coc-gatech-newelba/NewElbaAlpha.git</a>

<i>NOTE: if you do not gain permission from Josh Kimball, you will not be able to access this page.</i>

In your terminal, enter the directory where you would like to copy the repository
<pre><code>cd ~/
</code></pre>
Clone the repository from https://github.com/coc-gatech-newelba/NewElbaAlpha.git

Navigate into the directory of the repository you just created and replace with the repository’s name (NewElbaAlpha)

<code>cd NewElba Alpha</code>

Type:
<ul>
	<li>git status</li>
	<li>You should see this:</li>
</ul>
Next, execute the following commands:
<pre><code>cd /proj/Infosphere/  
cp -r ./NewElbaAlpha/generator/common /proj/Infosphere/  
mkdir -p /proj/Infosphere//rubbos/rubbos_yasu  
tar -zxvf ./NewElbaAlpha/generator/shared_files.tar.gz --directory=/proj/Infosphere//rubbos/rubbos_yasu  
mkdir -p /proj/Infosphere//softwares/data  
cp -r ./NewElbaAlpha/mScopeEventMonitors /proj/Infosphere//softwares  
cp -r ./NewElbaAlpha/mScopeResourceMonitors /proj/Infosphere//softwares   
cp /proj/Infosphere/shared_software/rubbos_orig_data.tar.gz /proj/Infosphere//softwares/data  
</code></pre>
<h4><a href="https://gtelbatutorial.wordpress.com/experiment-customization/">Experiment Description</a></h4>
Follow this <a href="https://gtelbatutorial.wordpress.com/experiment-customization/">link</a> if you want to execute an experiment other than the topology 1-1-1-1.

The example experiment uses an n-tier application benchmark, RUBBoS. RUBBoS is modeled after a commercial web-based bulletin board system, SlashDot. The benchmark natively supports Read-only and Read-Write workloads, and it enables users to specify the workload in terms of the number of concurrent client requests. For this tutorial, we will use workloads ranging from 1000 to 7000. This example experiment features a system topology composed of:
<ul>
	<li>1 Apache HTTP server</li>
	<li>1 Tomcat Application server</li>
	<li>1 CJDBC Middleware server</li>
	<li>1 MySQL DB server</li>
</ul>
Note: we generally refer to this as a <a href="https://gtelbatutorial.wordpress.com/experiment-topology-1-1-1-1/">1-1-1-1 topology</a> where each number corresponds to the number of deployed Web, Application, Middleware and Database servers in that order.

[googleapps domain="drive" dir="file/d/0ByvytIe8I-qpbDhDV1ZPU0RjcVU/preview" query="" width="640" height="480" /]

<em>Note: The video above takes you through executing an experiment. However, the most up to date information is listed below so put precedence on the below instructions and use the video as support.</em>

<a href="https://gtelbatutorial.wordpress.com/faqs/">FAQs and Best Practices</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date>2018-04-11 15:12:02</wp:post_date>
		<wp:post_date_gmt>2018-04-11 15:12:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>set-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Generation</title>
		<link>https://gtelbatutorial.wordpress.com/experiment-generation/</link>
		<pubDate>Wed, 11 Apr 2018 15:12:27 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=259</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Create experiment on Emulab cluster</h4>
Create a new experiment on Emulab by selecting the <i>Experimentation</i> drop down at the top of the website and select <i>Begin an Experiment.</i>

Fill out the the form accordingly.
<ul>
	<li>Make note of the <em><strong>Experiment Name</strong></em> you provide; this value will be needed later to generate the experiment's artifacts</li>
	<li><em>Naming Convention</em> for <em><strong>Experiment Name</strong></em> : use lowercase letters and/or numbers in the name, no spaces or special characters, including underscore ("_")</li>
	<li>This form also asks you to provide an <em>.NSFile</em></li>
</ul>
<p style="padding-left:30px;"><a class="button" href="https://gtelbatutorial.wordpress.com/nsfile">.NSFile Generation</a></p>

<ul>
	<li>This input file specifies the network topology, machine types and OS images for the experiment</li>
	<li>Note: a sample .NSfile can be found <a href="https://gtelbatutorial.wordpress.com/nsfile/">here</a>.
<ul>
	<li>To execute the 1-1-1-1 topology you can copy and paste the code given <a href="https://gtelbatutorial.wordpress.com/nsfile/">here</a> into a text editor. <em>Note: if you are using a Mac then use Sublime, Vim, or TextWrangler- do NOT use TextEditor. </em></li>
</ul>
</li>
	<li>For this example, the <em>.NSFile</em> needs to include 10 nodes, corresponding to: 1 Control node, 1 Benchmark node, 4 Client node, 1 HTTPD node, 1 Tomcat node, 1 C-JDBC node, and 1 MySQL node.</li>
</ul>
<em>Comment: In this example, all of the nodes are on one local area network (LAN). This can be changed by including more LAN's in the specification and connecting the desired nodes to a particular LAN.</em>

<em>Note: Node locations may be changed in the event that nodes of one group area all being used. Example: if all the d710 nodes are in use, pc3000 may be used instead. Please refer to "<a href="https://gtelbatutorial.wordpress.com/emulab-tips/">Emulab tips</a>" for how to view open nodes and other general Emulab related questions.</em>
<h4><a id="user-content-step-2-describing-the-experiment-by-editingcompleting-experiment-xml" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#step-2-describing-the-experiment-by-editingcompleting-experiment-xml"></a>Describing the Experiment by editing/completing Experiment XML</h4>
<a class="button" href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Parameters</a>

We use an XML file as a basis for generating all experiment artifacts. This XML file contains various environmental and experimental parameters, for example:
<ul>
	<li>username and groupname for executing the experiment</li>
	<li>workload, i.e. number of concurrent user requests</li>
	<li>number of nodes (servers) and the component software (application software) to install on each</li>
	<li>monitoring to activate</li>
</ul>
In short, these parameters control the software, topology, workload and monitors used during the execution of a system experiment. As such, it functions as a de facto experiment specification.

To begin, perform the following commands:
<pre><code>cd /proj/Infosphere//common/experiment_xml  
cp RUBBOS-1111-EMULAB-DEFAULT.xml RUBBOS-1111-EMULAB-.xml  
</code></pre>
Several default parameters need to be changed to execute our example:
<ul>
	<li><em>EMULAB_EXPERIMENT_NAME</em>
Complete this value using the <strong><em>Experiment Name</em></strong> value from above (step 1) using the following format: <em>Experiment Name.infosphere.emulab.net</em></li>
</ul>
<ul>
	<li>For example, if the supplied value for Experiment Name during Step 1 was jkimball1112, then the value for this parameter would be: jkimball1112.infosphere.emulab.net</li>
</ul>
<pre><img class="alignnone  wp-image-228" src="https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-32-55-pm.png" alt="Screen Shot 2018-04-10 at 2.32.55 PM" width="545" height="24" /></pre>
<ul>
	<li>Output Directories
<ul>
	<li>The following group of parameters direct where the experiment's scripts and output are copied.</li>
	<li>Complete these by providing the <em>Experiment Name</em> value from Step 1 and your Emulab account <em>username</em></li>
</ul>
</li>
</ul>
[INSERT CODE HERE]
<ul>
	<li><em>Username: </em>Complete using your Emulab account username</li>
</ul>
<img class="alignnone  wp-image-230" src="https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-37-35-pm.png" alt="Screen Shot 2018-04-10 at 2.37.35 PM" width="393" height="26" />
<ul>
	<li>Monitors: Set the following monitor parameters to <em>false</em></li>
</ul>
<img class="alignnone  wp-image-231" src="https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-38-20-pm.png" alt="Screen Shot 2018-04-10 at 2.38.20 PM" width="401" height="94" />
<ul>
	<li>Workloads
<ul>
	<li>This example experiment uses workloads ranging from 1000 to 7000 concurrent requests</li>
	<li>Lines like the one below can be modified by either changing the corresponding value or commenting out the line entirely</li>
</ul>
</li>
</ul>
<img class="alignnone  wp-image-232" src="https://gtelbatutorial.files.wordpress.com/2018/04/screen-shot-2018-04-10-at-2-38-46-pm.png" alt="Screen Shot 2018-04-10 at 2.38.46 PM" width="349" height="20" />

<em>Important Notes</em>
<ul>
	<li>mysqlReponseTime parameter should remain "false." The screencast accompanying these instructions sets this parameter incorrectly.</li>
	<li>This file contains many additional parameters. A more complete description for most of them can be found at the end of the tutorial in the <a href="https://gtelbatutorial.wordpress.com/xml-configuration-parameters/">XML Configuration Parameters</a>.</li>
	<li>In the case of errors using the "open" command, refer to the following webpage on how to use vim: click <a href="https://cs88-website.github.io/articles/vim.html#opening-files">here</a>.
<ul>
	<li>You also have the option of editing the file locally and using scp command to transfer the file back to the server.</li>
</ul>
</li>
</ul>
<h4>Generate Experiment Scripts and Configuration using Experiment XML</h4>
Experimental artifacts like the scripts and software configuration are created dynamically by the code generation pipeline. This pipeline can be executed using the following commands, substituting the values for and as provided in Step 2:
<pre><code>ssh node1.
cd /proj/Infosphere//common/rubbosMulini6
</code></pre>
Finally, open <em>runRubbosExperiment.sh</em> and substituting with the specified values
<pre><code>BUILD_DIR = /proj/Infosphere/
OUTPUT_HOME =  from Step2
</code></pre>
The script can now be run with the following command where corresponds to the name of the Experiment XML file from Step 2:
<pre><code>./runRubbosExperiment.sh 
</code></pre>
In the case of our running example, this should be:
<pre><code>./runRubbosExperiment.sh RUBBOS-1111-EMULAB-.xml
</code></pre>
<em>Important Notes</em>:
<ul>
	<li>Activating the experiment on <em>emulab</em>, ("swapping it in") and logging into node1 is not a <em>strict</em> dependency. Since the image and <em>emulab</em> environment already have the proper environment variables set, this step ensures consistency during experiment generation.
<ul>
	<li>For clear instructions on how to “swap in” your experiment on Emulab, and other important details, please refer to ‘Emulab Tips’</li>
</ul>
</li>
	<li>The script should be run from a location that has the environment variable, JAVA_HOME, set. Nodes using the FC15RubOral image already have JAVA_HOME set. So, we recommend connecting to the Control node with <strong>ssh</strong> to execute this step.</li>
	<li>Sample Experiment XML files are available in the <code>/examples</code> directory in our <a href="https://github.com/coc-gatech-newelba/NewElbaAlpha.git">Github repository.</a></li>
</ul>
<h4>Code Generator Description</h4>
In general, our code generator is orchestrated by way of the <code>runRubbosExperiment.sh</code> script. This script calls a Java program, DeployScriptGenerator, which generates all of the necessary scripts and artifacts for executing an experiment in one of the supported infrastructures. The following describes the script more generally and the organization of the code generator source code:
<ol>
	<li>Code Generator Organization:
<ul>
	<li>Base directory, <code>../common/rubbosMulini6</code>, contains the aforementioned script. It also acts as a reference point for executing the code generator and pipeline.</li>
	<li>Two sub-directories house the code generator source and base artifacts:
<ul>
	<li><code>../rubbosMulini6/templates</code> - contains the XSL-based code templates that serve as a basis for the experiment scripts</li>
	<li><code>../rubbosMulini6/source</code> - contains the Java source code for the code generator</li>
</ul>
</li>
</ul>
</li>
	<li>Parameter Descriptions. The <code>runRubbosExperiment.sh</code> script uses the following parameters in addition to those mentioned at the beginning of this Step. These might need to be altered depending on the environment used for generating experiments:
<ul>
	<li>MULINI_DIR: specifies the base directory of the code generator, i.e. <code>../rubbosMulini6</code>from above</li>
	<li>EXP_DIR: specifies the path to Experiment XML files, i.e. the location for the filename specified as a command line parameter</li>
</ul>
</li>
	<li><em>Dependencies</em>:
<ul>
	<li>Directories, <code>/templates</code> and <code>/source</code> need to be located in the same directory as the aforementioned script. Currently, all of these appear under <code>/common</code> in the source code repository under <code>/code_generator/</code></li>
	<li>Value of <code>OUTPUT_HOME</code> parameter used in this script needs to be the same as the value of the <code>OUTPUT_HOME</code> parameter specified in the referenced Experiment XML file</li>
</ul>
</li>
</ol>
<h4><a href="https://gtelbatutorial.wordpress.com/faqs/">FAQ and Best Practices</a></h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date>2018-04-11 15:12:27</wp:post_date>
		<wp:post_date_gmt>2018-04-11 15:12:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>experiment-generation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Experiment Execution</title>
		<link>https://gtelbatutorial.wordpress.com/experiment-execution/</link>
		<pubDate>Wed, 11 Apr 2018 15:12:40 +0000</pubDate>
		<dc:creator>gtelbaproject</dc:creator>
		<guid isPermaLink="false">https://gtelbatutorial.wordpress.com/?page_id=261</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Executing the Experiment on Emulab cluster</h4>
Continuing with our example, perform the following preliminaries by substituting the values for parameters, and , as provided in Step 2:
<pre><code>ssh node1.  
cd /scripts  
</code></pre>
Finally, the experiment can be run one of two ways (please read before choosing which script is best for your personal preference):
<pre><code>./run.sh
</code></pre>
While executing an experiment in this manner works, there a few downsides to executing an experiment this way. These limitations are:
<ul>
	<li>Error messages or standard output will not be captured for future analysis. This makes the verification that the experiment ran "correctly" rather difficult as debugging would require examining terminal-based output.</li>
	<li>Secondly, since this command is executed over an SSH session, it could timeout if the experiment execution time exceeds the default session timeout, causing an abrupt termination of the experiment prior to its natural completion. These problems are resolved by using the following, alternative method.</li>
</ul>
Running experiments under a <code>screen</code> session mitigates these problems. [Ensure the Linux program <em>screen</em> is installed prior to executing an experiment with this method.] The Linux program, <em>screen</em>, enables scripts to be executed independent of an active <strong>ssh</strong> session. To run an experiment under <em>screen</em>, use the following:
<pre><code>./run_screen.sh
</code></pre>
This script creates a new session, navigates to the experiment at the provided path, runs the experiment while storing the output, and detaches the screen from your current shell. The script also saves all output to a log file in the specified directory.

To re-attach to the screen session, a user can run the following command and replacing with the <em>Experiment Name</em> value from Step 1:
<pre><code>screen –r 
</code></pre>
<h4><a id="user-content-experiment-organization" class="anchor" href="https://github.com/coc-gatech-newelba/coc-gatech-newelba.github.io/wiki/Tutorial:-Bootstrap-&amp;-Experiment-Execution-(alpha)#experiment-organization"></a>Experiment Organization</h4>
In general, every generated experiment adheres to a canonical structure.
<pre><code>/proj/infosphere//rubbos/rubbos_yasu/  
</code></pre>
<ul>
	<li>
<ul>
	<li>is the top-level directory that holds all of the generated experiment artifacts. In fact, this line corresponds to the value supplied for the <em>OUTPUT_HOME</em> parameter in the Experiment XML</li>
	<li>This acts as a de facto reference point for many other scripts during the installation and configuration of the environment's nodes and benchmark</li>
	<li>It must be accessible to the environment where the experiment will be run, so the associated scripts and configuration can be executed</li>
	<li><em>Shared Structures.</em> There are several <em>shared directories</em>, i.e. all experiments reference these directories and must exist under <code>../rubbos_yasu</code>, i.e. in the context of OUTPUT_HOME, these structures must be at the same level in the path as the . These directories are:
<ul>
	<li>emulab_files: file system configuration for <code>fdisk</code></li>
	<li>tomcat_files: standard startup and shutdown scripts</li>
	<li>apache_files: static html files for the benchmark</li>
	<li>rubbos_files: benchmark source code for the Client generator and Application logic (Servlets)</li>
	<li><em>Note: There can be others such as postgres_files and a directory for marmot; however, these are only necessary for running experiments with postgres DBMS and the PRObE cloud respectively.</em></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4><a href="https://gtelbatutorial.wordpress.com/faqs/">FAQ and Best Practices</a></h4>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2018-04-11 15:12:40</wp:post_date>
		<wp:post_date_gmt>2018-04-11 15:12:40</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>experiment-execution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
